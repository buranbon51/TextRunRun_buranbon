







引数は、半角スペースで分割されない。
一つの文字列同然になる。

## タイプ 5 の特徴
### <<< の動作
読み込む
### 履歴に残すか
残す
### &&& の動作
認識して処理する
### >>> の動作
認識して処理する
### %% と ## を展開するかどうか
展開する
### " " で囲まれた文字

%% や ## で囲まれた文字は展開されず、そのままになる。

&&& や >>> は特別な文字として認識しない。

" " の文字は削除される。
### 分割テキストでの動作

&&& や >>> を認識して実行するが、
&&& や >>> の引数
の入力欄 8つめの入力欄 でなければ認識しない。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &addWordListAddFromFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

入力補完に追加する。

ファイルパスを指定する。
trrEvery\user\addList\addWordList.txt

のファイルを使うと「追加の単語」として入力補完に表示する文字を追加できるが、 それと同じ種類に追加する。

この &addWordListAddFromFile で指定するファイルは、そのファイルと同じ書式で記述する。

書式の説明

    一行につき一つ追加する。
    単語の後に、///を記入すると、その後の文字を説明文にできる。
    [追加の単語]スペース///スペース[説明文]
    説明文は、###nの文字があると、それを改行に変換する。
    前後のスペースは取り除かれる。

補足

ファイルを指定するのではなく、一つだけ追加したい場合は
&addWordListAdd を使う。

引数全て

    ファイルパスを指定する。
    使用するファイルは、
    addWordList.txt
    のファイルと同じ書式で記述する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

この TRR の作業フォルダを変更する。
A_WorkingDir を変更することになる。

SetWorkingDir の Ahkコマンド を使用した場合と同じ。

その後、ファイルパスを相対パスで指定した場合、ここで指定したフォルダのパスが基準になる。

例
&cd  %A_MyDocuments%
A_MyDocuments に移動する

引数なし

    この TRR があるフォルダに移動する。
    A_ScriptDirに移動
    &cdmainと同じ。

引数全て

-ハイフン

    前に &cd を使用していた場合、使用する前のフォルダに戻す。
    一つ前に使った分のみ戻す。
フォルダのパス

    指定したフォルダに移動する。
    A_WorkingDir を変更することになる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cdmain
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

A_WorkingDir を変更する。
この TRR があるフォルダに移動する。
A_ScriptDirに移動

&cd   引数なし
と同じ。

引数に意味は無い。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cdmydocu
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

A_WorkingDir を変更する。
A_MyDocuments に移動する。

&cd  %A_MyDocuments% と同じ。

引数に意味は無い。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cleanTextExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

テキスト の入力欄の文字をカラにする。

分割テキスト の場合、全ての入力欄をカラにする。

&cleanText と、内部処理が全く同じ。
&cleanText は、タイプ3である事自体がこれとの違いである。
&cleanText の方は &&& を「続けて実行するための文字」として認識できない。

&cleanTextEasy は、 二行以上のテキスト や 二行以上のアイテム の中で記入している場合、実行元を認識できない。

その場合、この &cleanTextExecutor や &cleanText の方は実行元の入力欄の文字をカラにできる。

引数は意味をなさない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cmd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

コマンドプロンプトを起動する。

引数にフォルダのパスを指定すると、そのフォルダを基準にコマンドプロンプトを起動する。

引数なし

    A_WorkingDir を基準に、コマンドプロンプトを起動する。
引数全て

    フォルダのパスなら、
    そのフォルダを基準にコマンドプロンプトを起動する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &deleteItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

アイテム を削除する。

引数に削除する アイテム名 を入れる。

アイテム名

    その アイテム を削除する。
-tmp

    一時的にのみ保存 にチェックをしていた アイテム を全て削除する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &guiHideAndShowWaitExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

実行元の テキスト のＧｕｉを閉じ、
そのＧｕｉを遅れて表示させる。

&guiHideTextExecutor と &guiShowWaitExecutor を実行するのと同じ。
補足

ただしこちらは
&guiHideTextExecutor にある、 -n の引数を指定しても意味がない。

WinWaitActive,  A は必ず実行される。

引数は無くてもよいが、

引数1には何秒後に表示するかを指定できる。
数字だけでも良いが、 1s の形式でもよい。
30 秒 までしか指定できない。
指定しなかった場合は、 0.5 を指定した場合と同じ。

引数2以降があると、表示の仕方を指定している文字として扱う。
Gui, Show, Param2
の Param2 と同じ指定方法。

設定 の テキストを閉じるのではなく、最小化させる の影響を受ける。

この設定がオンなら、閉じるのではなく、最小化する。
ただし、すぐにまた表示するので意味はない。
現時点では

実行元が、 テキスト でなくても効果がある。

引数なし

    引数1に 0.5 を指定した場合と同じ。
    実行元の テキスト のＧｕｉを閉じ、
    そのＧｕｉを 0.5 秒後に遅れて表示させる。
引数1

    何秒後に表示するかの指定。
    数字だけでも良いが、 1s の形式でもよい。
    30 秒 までしか指定できない。
引数2以降

    表示の仕方を指定している文字として扱う。 Gui, Show, Param2
    の Param2 と同じ形式で指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &guiHideTextExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

実行元のテキストのＧｕｉを閉じる。

設定 の テキストを閉じるのではなく、最小化させる の影響を受ける。

この設定がオンなら、閉じるのではなく、最小化する。
現時点では

実行元が、 テキスト でなくても効果がある。

テキストのＧｕｉを閉じた後、
WinWaitActive,  A
も実行して、何らかのウインドウがアクティブになるのを少し待つ。

-n の引数を指定すると、
WinWaitActive,  A
を実行しないようにする。

引数なし

    実行元のテキストのＧｕｉを閉じる。
    テキストのＧｕｉを閉じた後、
    WinWaitActive,  A
    も実行して、何らかのウインドウがアクティブになるのを少し待つ。
-n

    実行元のテキストのＧｕｉを閉じる。
    WinWaitActive,  A
    を実行しない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &guiShow
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

Ｇｕｉを表示する。
Ｇｕｉの番号を指定する。

B_GuiNum から始まる変数はＧｕｉの番号を値に持つ。

TRR のＧｕｉの番号を指定する場合は、この変数を使って指定する事を勧める。

例
&guiShow  %B_GuiNumText2%
テキスト2 を表示。

引数2以降があると、表示の仕方を指定している文字として扱う。
Gui, Show, Param2
の Param2 と同じ指定方法になる。

引数1

    Ｇｕｉの番号。
引数2以降

    表示の仕方を指定している文字として扱う。
    Gui, Show, Param2
    の Param2 と同じ指定方法になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &guiShowWaitExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

実行元の テキスト のＧｕｉを表示させるが、遅れて表示させる。

引数1には何秒後に表示するかを指定する。

数字だけでも良いが、 1s の形式でもよい。
30 秒 までしか指定できない。

指定しなかった場合は、 0.5 を指定した場合と同じ。

0 を指定すると、即表示する。
実行元のを表示させたいだけの場合は 0 を指定するとよい。

引数2以降があると、表示の仕方を指定している文字として扱う。
Gui, Show, Param2
の Param2 と同じ指定方法。
現時点では

実行元が、 テキスト でなくても効果がある。

引数なし

    引数1に 0.5 を指定した場合と同じ。
    実行元の テキスト のＧｕｉを表示させるが、遅れて表示させる。
引数1

    何秒後に表示するかの指定。
    数字だけでも良いが、 1s の形式でもよい。
    30 秒 までしか指定できない。

    0 を指定すると、すぐに表示する。
引数2以降

    表示の仕方を指定している文字として扱う。 Gui, Show, Param2
    の Param2 と同じ形式で指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &hotkeyAllGroundDelete
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

常時使用のキーを削除する。

引数に削除するキー名を入れる。

キー名は、ウインドウタイトルの指定が必要になる場合があるという仕様上、
Ctrl+Alt+Shift+a の形式にしなければならない。
テキスト上のキーの指定と違って、
+^!a の形式では指定できない。

キーの一覧 の、 常時使用 のキーのリストにあるキー名と、全く同じ記述でなければならない。

ウインドウタイトルをしている場合は、
_ アンダーバー を、キー名とウインドウタイトルの間に置いた、
[キー名]_[ウインドウタイトル]
の形式で指定しなければならない。

なお、キーは完全に削除するのではなく、
実際には オフ にするだけである。

よって、削除したキーを再登録することができない。
TRR を再起動しない限り、この影響は残る。

-tmp の引数を指定すると、
一時的にのみ保存 にチェックをしていた常時使用のキーを全て削除する。
諸注意

その際、再起動する事になる。

キー名

    その常時使用のキーを削除する。
    テキスト上のキーの指定と違って、
    キーの一覧 の、 常時使用 のキーのリストにあるキー名と、全く同じ記述でなければならない。

    ウインドウタイトルをしている場合は、
    _ アンダーバー を、キー名とウインドウタイトルの間に置いた、
    [キー名]_[ウインドウタイトル]
    の形式で指定しなければならない。
-tmp

    一時的にのみ保存 にチェックをしていた常時使用のキーを全て削除する。
    TRRを再起動する事になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &hotkeyOnTextDelete
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

常時使用のキーを削除する。

引数に削除するキー名を入れる。

キー名は、
Ctrl+Alt+Shift+a の形式でも、
+^!a の形式でもどちらでもよい。

なお、キーは完全に削除するのではなく、
実際には オフ にするだけである。

よって、削除したキーを再登録することができない。
TRR を再起動しない限り、この影響は残る。

-tmp の引数を指定すると、
一時的にのみ保存 にチェックをしていた テキスト上のキーを全て削除する。
諸注意

その際、再起動する事になる。

キー名

    その常時使用のキーを削除する。
-tmp

    一時的にのみ保存 にチェックをしていた テキスト上のキーを全て削除する。 TRRを再起動する事になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &itemReloadAll
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

アイテムの情報を全てカラにしてから、
アイテムを全て読み込み直す。

読み込む対象は、

    普通に登録したアイテムと
    fromFileNameから登録したアイテム

の２種類。

&newItemFromCommand を使用して登録した アイテム は、ここでは読み込めない。

アイテムの情報を全てカラにする仕様上、
&newItemFromCommand を使用して登録した アイテム も全て初期化されてしまう。
補足

普通に登録したアイテムとは、
テキスト上で、 Ctrl+N を押して表示される、
アイテム登録のウインドウ から登録したアイテムの事。

一時的に保存にしてある場合も、普通に登録したアイテムである。

&newItemFromCommand を使用して登録したアイテムは読み込めないので、その対処法を書いておく。

まず、 &newItemFromCommand を使用してある処理をまとめたアイテムを作る。

「&newItemFromCommandをまとめたアイテム」 と呼ぶ。

起動時に実行するアイテム に、その
「&newItemFromCommandをまとめたアイテム」 を記入して、起動時にキーを登録するようにする。

それと、
&itemReloadAll と
「&newItemFromCommandをまとめたアイテム」 を実行するアイテムを作る。

&itemReloadAll を使うのではなく、その アイテム を使って再読み込みをすれば、全てのアイテムを再読み込みする事が一度にできる。

引数に意味は無い。
しかし、 -h なら説明を表示する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &logoff
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

ログオフする。

使い方は
&shutdown と同じ

指定時間
    now 	すぐに
    59 	59分後
    23h  59m  59s 	23時間59分59秒後
-timer

    引数2に時刻を指定する。
    235959 で、 23時59分59秒 の時刻に実行する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &ls
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

フォルダ内にあるファイル名を表示する。

引数にフォルダパスを指定すると、そのフォルダ内のファイル名を表示する。
現時点では

右端に \ が必要である。

引数なし

    A_WorkingDir 内にあるファイルを表示。
引数全て

    フォルダのパスなら、そのフォルダ内にあるファイルを表示。
    現時点では、右端に \ が必要である。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &mkdir
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

フォルダを作成する。

引数にフォルダのパスを指定する。
絶対パスでない場合、
A_WorkingDir を基準にした位置からフォルダを作る。

引数全て

    作成するフォルダのパスを指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &multiplelineExeFromFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

二行以上のテキスト と同じ処理を実行する。
&multiplelineExe と違い、ファイルパスを指定する。

引数に、実行する処理を記入したファイルパスを指定する。

引数全て

    ファイルパスを指定する。
    ファイルの中に記入してある内容を 二行以上のテキスト と同じ処理として扱って実行する。
    ファイルパスの拡張子は、 txt や ahk や trr といった場合しか受け付けない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &outArgsTestType5
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

タイプ5の規定のコマンドの引数の実験のために用意してある。

引数全て

    この文字などがどのように規定のコマンドに渡されるかの確認のための出力。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &readFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

ファイルを読み込んで、 ファイル表示用 のＧｕｉに表示する。

引数がファイルパスなら、そのファイルの中身を表示する。

ただし、拡張子は限られたもののみ使用可能。

    txt cvs ahk trr 

のみ可能。

引数全て

    ファイルパスを指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &shortCutPath
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

引数がショートカットのファイルパスだったら、
そのリンク先 本体の位置 を テキスト上に表示する。

分割テキスト で実行した場合、
作業フォルダも表示し、
引数もファイルパスと分けて表示する。

一行テキスト か 分割テキスト 以外から実行した場合は、
蓄え式説明表示 の方に出力する。

似たようなものに、
F_getShortcutPath( ) や
F_getShortcutPathAndArgs( ) の関数がある。

こちらは、変数に代入して使用できる。

引数全て

    ショートカットのファイルパスだったら、
    そのリンク先 本体の位置 を テキスト上に表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &shutdown
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

シャットダウンする。

引数に指定時間を記入する。
now 	すぐにシャットダウンする
59 	59分後
23h 59m 59s 	23時間59分59秒後

-timer を引数1に指定すると、時刻での指定になる。

引数2に時刻を指定する。
235959 なら、 23時59分59秒 にシャットダウンする。
現時点では

shutdown.exe
を使って動作させている。

指定時間
    now 	すぐにシャットダウンする
    59 	59分後
    23h 59m 59s 	23時間59分59秒後
-timer

    引数2に時刻を指定する。
    235959 で、 23時59分59秒 の時刻に実行する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &shutdown_r
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

再起動する。

使い方は
&shutdown と同じ。

指定時間
    now 	すぐに
    59 	59分後
    23h 59m 59s 	23時間59分59秒後
-timer

    引数2に時刻を指定する。
    235959 で、 23時59分59秒 の時刻に実行する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &snippetAddFromFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

簡易入力を追加する。

引数にファイルパスを指定する。

簡易入力 のタブ内の 新規登録 ボタンを使って登録した時と違い、
ファイルに設定を保存したりしないので、再起動すると、全て無かったことになる。

この方法で登録した簡易入力は、 コマンドから登録 と表示される。
そして、さらにその下に引数で指定したファイルのファイル名も表示するようにしている。

指定するファイル内の書式だが、「追加の単語」に使う
trrEvery\user\addList\addWordList.txt

のファイルとほぼ同じ書式で記入する。
[キーの文字１] /// [展開後の文字１]
[キーの文字２] /// [展開後の文字２]
[キーの文字３] /// [展開後の文字３]

書式の説明

    一行につき一つ簡易入力の情報を記入する。
    一行の中に ///を必ず記入する。
    ///の前に キーの文字 を、
    ///の後に 展開後の文字 を記入する。
    前後のスペースは取り除かれる。

補足1

展開後にスペースを付け足す の設定は指定できない。
補足2

ファイルを指定するのではなく、一つだけ追加したい場合は
&snippetAdd を使う。

引数全て

    ファイルパスを指定する。
    使用するファイルは、
    addWordList.txt
    のファイルと同じ書式で記述する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &snippetDelete
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

簡易入力を削除する。

引数に削除する「キーになる文字」を入れる。

引数全て

    キーになる文字を指定する。
    その簡易入力を削除する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockExeAllBlue
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

ストック一覧 の青の方 を全て実行する。

引数1にリストの番号を指定する。

二行以上のテキスト のように、一行一行スクリプトを実行するのとほぼ同じだが、少し違いがある。

引数2以降がある場合、
その引数2以降の文字をストックの文字の後に続く引数として扱うが、
ストック一つ一つに、その引数2以降の文字が、引数として後ろに付け加えられる。
10個実行するのであれば、
10個に同じ引数が後ろに付け加えられる。

引数がいらないストックの入力欄には、末尾に %-- を記入しておく必要がある。

D_stockBlue_1$$ などの文字列を使用できる。

&collabText の時に使用できる、 D_stockBlue_1$$ などがこちらでも使用できる。

ストックの入力欄の方に、 D_stockBlue_1$$ の文字があった場合、ストック青の方の 1 にある文字が、 D_stockBlue_1$$ と入れ替えられる。

D_stockBlue_1$$ に関する事は次のページで説明する。

細かい説明 $$が付く文字

引数1

    リストの番号
引数2以降

    ストックの入力欄に記入してある処理の後に続く引数として使用される。
    全てのストックの後に付け加えられてしまうため、
    この引数がいらないストックの入力欄には、末尾に %-- を記入しておく必要がある。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockExeAllGreen
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ5

-----------------------------------------------------

ストック一覧 の緑の方 を全て実行する。

&stockExeAllBlue と同じ

引数1

    リストの番号
引数2以降

    ストックの入力欄に記入してある処理の後に続く引数として使用される。
    全てのストックの後に付け加えられてしまうため、
    この引数がいらないストックの入力欄には、末尾に %-- を記入しておく必要がある。

