





引数は、半角スペースで分割されない。
一つの文字列同然になる。

ここに属する規定のコマンドの数は少ないが、
&&& の扱いと >>> の扱いが
それぞれの規定のコマンドによって違う。

 タイプ 4 の特徴
 <<< の動作
読み込む
 履歴に残すか
規定のコマンドによって、扱い方が違う。
 &&& の動作
規定のコマンドによって、扱い方が違う。
 >>> の動作
規定のコマンドによって、扱い方が違う。
 %% と ## を展開するかどうか
規定のコマンドによって、扱い方が違う。
 " " があった場合
無視する
 分割テキストでの動作
フォーカスされた位置は関係ない。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &collabText
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------
Ctrl+1 など多数

-----------------------------------------------------

他のテキストに記入してある文字を先頭にして実行する。

引数1 に数字を指定する。その数字がどのテキストを利用するかを表す。

どの数字がどのテキストを表しているかは、下の引数の説明を参考にして。

TRR には、ストックと呼んでいるものがあるが、これを利用する事はつまりこの規定のコマンドを使っている事と同じである。

引数1 が 6 であった場合は、 ストックの青い方を利用する事になる。

引数1 が 7 であった場合は、 ストックの緑の方を利用する事になる。

引数1 が 6 か 7 の場合は、
引数2 にも数字を指定する事になる。
その数字がストックの何番目の入力欄かを表す。

引数1 に数字を指定するが、その後に続く引数が「利用する テキスト の文字」の後に続く引数として使うものになる。

引数2 にも指定する場合はその後の引数がそれになる。
&collabText  [番号]  [利用するテキストの後に続く引数]

もしくは
&collabText  [番号]  [番号]  [利用するテキストの後に続く引数]

といった指定の仕方になる。

実行する際は、
[利用するテキストの文字] + スペース + [利用するテキストの後に続く引数]

の形で実行される。

実行しようとする内容はツールチップを使って表示する様にしている。
左下あたりに表示
補足

_>>> を使うと、ツールチップではなく別の個所に実行しようとする内容を出力する様にしている。

_>>> の仕様は別のページを参考に。

マニアック 出力先の変更
分割テキスト を利用する場合
今のバージョンで

分割テキスト を利用する場合は、
分割テキスト の 1つめと 4つめの入力欄 以外の残り 6つの入力欄の文字を足したものを利用する。

規定のコマンド と 作業フォルダのみ の入力欄以外の入力欄の文字を足す。
諸注意

この &collabText を使う場合は、 一行テキスト のスクリプトとして実行される。

分割テキスト を利用するからといって、 分割テキスト と同じ動作を期待する事はできない。

あくまで、 分割テキスト に記入している文字を利用できるというだけ。
二行以上のテキスト を利用する場合

二行以上のテキスト を利用する場合は、
二行以上のスクリプトとして実行する。
それ以外は、 一行テキスト のスクリプトとして実行される。

二行以上のテキスト に記入してある文字の後に、
[利用するテキストの後に続く引数] を足した文字で実行される。

その際、実行しようとする内容の表示はツールチップではなく、 一時的な説明 の方に出力される。
ただしウインドウは表示しない。

これは、 設定 の内容によって反映されるかどうかが決まる。
今のバージョンで

履歴についてだが、現時点では &collabText を使った場合は履歴に保存しないようにしている。

なので、ストックを利用した場合も履歴に保存しないようになっている。

規定のコマンドタイプ4 は特殊な文字の動作の仕方がそれぞれ違う。
ここで動作の仕方を挙げる。

 &collabText の特徴
 履歴に残すか
残さない
 &&& の動作
処理しない。

というか、引数としてそのまま渡す。

どう処理するかは 利用するテキストの内容次第。
 >>> の動作
通常は実行しようとしている内容をツールチップに表示するようにしているが、それを別の個所に出力する。

そしてさらに、引数としてそのまま渡す。
よって、 利用するテキストの内容に影響を与える。
どう処理するかは利用するテキストの内容次第。
 %% と ## を展開するかどうか

展開する

引数1

1

    テキスト1を利用
2

    テキスト2を利用
3

    テキスト3を利用
4

    分割テキスト1を利用
5

    分割テキスト2を利用

6

引数2にさらに番号を指定する。
ストックの青の入力欄を利用して実行する。

1

    入力欄 1 を利用
省略
9

    入力欄 9 を利用
10

    入力欄 10 を利用

7

引数2にさらに番号を指定する。
ストックの緑の入力欄を利用して実行する。

1

    入力欄 1 を利用
省略
9

    入力欄 9 を利用
10

    入力欄 10 を利用

8

    二行以上のテキスト を利用

追加で説明
規定のキー

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &goFunc
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------

関数を実行する。
テキストに関数だけを記入しても実行できるが、少し違いがある。

関数だけを記入した場合、 &&& を認識しない。
&&&があると、関数として認識できない。

しかし、 &&& の後の処理は実行される。

&goFunc を使った場合、
&&& を認識する。

&&& の前と後を分割して、
&&& の前の処理を実行した後、 &goFunc の処理の事
&&& の後の処理を実行する。

なお、サブルーチンを実行するなら Ahkコマンド の Gosubがある。
こちらは、 Ahkコマンド なので、引数を , で区切る。

規定のコマンドタイプ4 は特殊な文字の動作の仕方がそれぞれ違う。
ここで動作の仕方を挙げる。

 &goFunc の特徴
 履歴に残すか
残す
 &&& の動作
認識して処理する。
 >>> の動作
認識して処理する。
 %% と ## を展開するかどうか

展開するが、 関数名につき一つ、
引数 1つ につき一つとして分ける事になる。

関数名と引数全てを一つの変数の中に代入して、
それを展開して使用するといった事はできない。

普通に関数を指定する場合とルールは同じである。

引数全て

    関数なら、その関数を実行する。

&&&があった場合を少し説明。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &multiplelineExe
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------

二行以上のテキスト と同じ処理を実行する。

引数に、実行する処理を入れる。

% % や # # で囲まれた文字は展開する。

`n の文字は改行に置換する。

複数行を記入したい場合は、それを利用する事で複数行を一行で記入できる。

規定のコマンドタイプ4 は特殊な文字の動作の仕方がそれぞれ違う。
ここで動作の仕方を挙げる。

 &multiplelineExe の特徴
 履歴に残すか
残す
 &&& の動作
認識して処理する
 >>> の動作
認識して処理する
 %% と ## を展開するかどうか

展開する

引数全て

    二行以上のテキスト と同じ処理を実行する。
    % % や # # で囲まれた文字は展開する。
    `n の文字は改行に置換する。
    &&& や >>> の処理は、この時点では実行せず、引数の処理内容に一旦渡す。
    実行は引数の処理内容しだい。

追加で説明

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsTestType4
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------

タイプ4の規定のコマンドの引数の実験のために用意してある。

タイプ4は、規定のコマンドによって、引数の扱い方が違うので、 他の種類より細かい情報を取得する。

引数全て

    この文字などがどのように規定のコマンドに渡されるかの確認のための出力。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &timer
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------

指定した時刻に指定した処理を実行できる。
&timer  [指定する時間]  [実行させる処理]
指定する時間の形式
235959 	２３時５９分５９秒
2359 	２３時５９分
23 	２３時

&&& の文字があった場合、 &&& の右が
[実行させる処理] になる。
&timer  [指定する時間]  &&&  [実行させる処理]

このTRR独自のタイマーを使って処理する。

タイマー1 から タイマー10 までの 10種類 のタイマーの候補がある。

このTRR独自のタイマーは、 この 10種類までしか同時に使うことができない。

タイマー一覧 のウインドウで、あと何秒で実行できるかを確かめることができる。

-n または --number
この引数の後にスペースを入れてその後に数字を入れると、使用する タイマーの番号 を指定できる。
&timer  -n  [数字]  [指定する時間]  [実行させる処理]

[数字] の部分がタイマーの番号を表す。
1 から 10 の番号を指定する。

&timerStop を使ってタイマーを止めれるようにしたい場合は、使用するタイマーの番号を指定して使う事でそれが可能になる。

数字の番号のタイマーが既に使用中だった場合は、既に使用中のタイマーは破棄され新しく実行させたタイマーの内容が上書きされる。

-[数字] の指定の仕方もある。
- ハイフン の後に数字を付ける。

-n [数字] の指定と同じ効果になる。
使用するタイマーの番号を指定する時に使う。
&timer  -[数字]  [指定する時間]  [実行させる処理]

-1 から -10 を指定する。

-o または --output
これを指定すると、指定した時間が経過して処理が実行される時に、それが実行された事を出力する。
実行した内容を出力する。

蓄え式説明表示 に出力される。ウインドウは表示されず、文字が出力されるだけ。

指定時間が経過した時の内容ではなく、 &timer を実行した時点での内容を出力したい場合は、
_>>> D_outputGui を &&& の直前に記入して実行する事で処理しようとしている内容が出力されるようにしている。

-l または --list
これを指定すると、 タイマー一覧 のウインドウを表示する。
&timerView と同じ

-d または --delete
この引数の後にスペースを入れてその後に数字をいれると、実行中のタイマーを中止する。
&timer -d [中止させるタイマーの番号]

[数字] の部分がタイマーの番号を表す。
1 から 10 の番号を指定する。

数字ではなく all を指定すると、タイマーを全て停止する。

-o または --output も同時に指定していた場合は、実行した事が 蓄え式説明表示 に出力される。
ウインドウは表示されず、文字が出力されるだけ。

&timerStop  [番号] と同じ。

-n や -o などのオプションの指定は
[指定する時間] の前に記入しなければならない。

[指定する時間] が今の時間より前の時間を指定している場合は、 次の日の時間 として判断される。

規定のコマンドタイプ4 は特殊な文字の動作の仕方がそれぞれ違う。
ここで動作の仕方を挙げる。

 &timer の特徴
 履歴に残すか
残す
 &&& の動作
&&& の右の文字が、指定した時間に実行する処理として扱う。
 >>> の動作
実行しようとする内容を出力する
 %% と ## を展開するかどうか

[実行させる処理] の左の文字に対しては展開する。しかし少しルールが変わっているので下に紹介する。

[実行させる処理] に対してはこの時点では展開しない。

- の文字でオプションがあるかどうかを認識する。
なので -%varName% 等の形で指定をしないとオプションが認識できない。

[指定する時間] は展開した後に書式を確認するため % % などを使えるが、オプションと切り離しておかなければならない。
-o 等のオプションと同じ一つの変数内に格納して使用したりはできない。

--number 等の文字でオプションを指定する場合は展開前の段階で指定しなければならない。

引数全て
    &timer  [指定する時間]  [実行させる処理]

    または
    &timer  [指定する時間]  &&&  [実行させる処理]

    の形式で指定する。

[指定する時間]

    指定する時間の形式
    010101 	１時１分１秒
    0101 	１時１分
    01 	１時

    オプションがあるが、 [指定する時間] の前に記入しなければならない。
-n  [数字]
--number  [数字]

    使用するタイマーの番号を指定する。
    [数字] の個所に 1 から 10 の番号を指定する。

    指定した数字のタイマーが既に実行中だった場合は、同じ番号の前のタイマーは破棄されて新しいタイマーの内容が上書きされる。
-[数字]

    --number を使った時と同じ。
    -1 から -10 の番号を指定する事でも、使用するタイマーの番号を指定できる。
-o
--output

    指定した時間が経過して処理が実行されると、その実行内容を 蓄え式説明表示 に出力されるようにする。
    ウインドウは表示しない。
-l
-list

    タイマー一覧 のＧｕｉを表示する。
-d  [数字]
-delete  [数字]

    実行中のタイマーを中止する。
    [数字] の個所に 1 から 10 の番号を指定する。
    その数字が [中止させるタイマーの番号] の指定になる。

    all
    数字ではなく all を指定すると、全ての番号のタイマーを停止する。
[実行させる処理]

    [指定する時間] の右の文字が、
    [実行させる処理] になる。

    &&& の文字がある場合は、それの右の文字が、 [実行させる処理] になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &wait
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ4

-----------------------------------------------------

指定した時間の後に、処理を実行する。
&wait  [指定する時間]  &&&  [実行させる処理]
指定する時間の形式
10s 	１０秒後
23h  59m  59s 	２３時間５９分５９秒後

&&& は必要。
&&& の後に実行させる処理を入れる。
&timer の場合は &&& はあってもなくてもよい。

このTRR独自のタイマーを使って処理する。

タイマー1 から タイマー10 までの 10種類 のタイマーの候補がある。

このTRR独自のタイマーは、 この 10種類までしか同時に使うことができない。

タイマー一覧 のウインドウで、あと何秒で実行できるかを確かめることができる。
補足

この &wait は、 Ahkコマンド の Sleep と違って、 SetTimer を使って時間差を実現しているため、
「続けて実行する他の処理がストップする」といったことは無いと思われる。

-n または --number
この引数の後にスペースを入れてその後に数字を入れると、使用する タイマーの番号 を指定できる。
&wait  -n  [数字]  [指定する時間]  &&&  [実行させる処理]

[数字] の部分がタイマーの番号を表す。
1 から 10 の番号を指定する。

&timerStop を使ってタイマーを止めれるようにしたい場合は、使用するタイマーの番号を指定して使う事でそれが可能になる。

数字の番号のタイマーが既に使用中だった場合は、既に使用中のタイマーは破棄され新しく実行させたタイマーの内容が上書きされる。

-[数字] の指定の仕方もある。
- ハイフン の後に数字を付ける。

-n [数字] の指定と同じ効果になる。
使用するタイマーの番号を指定する時に使う。
&wait  -[数字]  [指定する時間]  &&&  [実行させる処理]

-1 から -10 を指定する。

-o または --output
これを指定すると、指定した時間が経過して処理が実行される時に、それが実行された事を出力する。
実行した内容を出力する。

蓄え式説明表示 に出力される。ウインドウは表示されず、文字が出力されるだけ。

指定時間が経過した時の内容ではなく、 &wait を実行した時点での内容を出力したい場合は、
_>>> D_outputGui を &&& の直前に記入して実行する事で処理しようとしている内容が出力されるようにしている。

-n や -o といった指定は [指定する時間] の前に記入しなければならない。

[指定する時間] は、合計が 24時間以上になる場合は指定できない。
86400秒以上は指定できない。

規定のコマンドタイプ4 は特殊な文字の動作の仕方がそれぞれ違う。
ここで動作の仕方を挙げる。

 &wait の特徴
 履歴に残すか
残す
 &&& の動作
&&& の右の文字が、指定した時間が経過した時に実行する処理として扱う。
 >>> の動作
実行しようとする内容を出力する
 %% と ## を展開するかどうか

&&& の左の文字に対しては展開する。しかし少しルールが変わっているので下に紹介する。

[実行させる処理] に対してはこの時点では展開しない。

- の文字でオプションがあるかどうかを認識する。
なので -%varName% 等の形で指定をしないとオプションが認識できない。

[指定する時間] は展開した後に書式を確認するため % % などを使えるが、オプションと切り離しておかなければならない。
-o 等のオプションと同じ一つの変数内に格納して使用したりはできない。

--number 等の文字でオプションを指定する場合は展開前の段階で指定しなければならない。

引数全て
    &wait  [指定する時間]  &&&  [実行させる処理]

    の形式で指定する。

    指定する時間の形式。
    10m 	１０分後
    1h  1m  1s 	１時間１分１秒後

    オプションがあるが、 [指定する時間] の前に記入しなければならない。

-n  [数字]
--number  [数字]

    使用するタイマーの番号を指定する。
    [数字] の個所に 1 から 10 の番号を指定する。

    指定した数字のタイマーが既に実行中だった場合は、同じ番号の前のタイマーは破棄されて新しいタイマーの内容が上書きされる。
-[数字]

    --number を使った時と同じ。
    -1 から -10 の番号を指定する事でも、使用するタイマーの番号を指定できる。
-o
--output

    指定した時間が経過して処理が実行されると、その実行内容を 蓄え式説明表示 に出力されるようにする。
    ウインドウは表示しない。

追加で説明


