






引数は、半角スペースで分割されない。
一つの文字列同然になる。

 タイプ 3 の特徴
 <<< の動作
読み込む
 履歴に残すか
残さない
 &&& の動作
無視する
 >>> の動作
無視する
 %% と ## を展開するかどうか
しない
 " " があった場合
無視する
 分割テキストでの動作
フォーカスされた位置は関係ない。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &cleanText
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------
Alt+C

テキストの入力欄の文字をカラにする。

分割テキストの場合、全ての入力欄をカラにする。

&cleanTextExecutor と、内部処理が全く同じ。
&cleanTextExecutor は、タイプ6である事自体がこれとの違いである。
&cleanTextExecutor の方は &&& を「続けて実行するための文字」として使用可能。

引数全て

    意味をなさない。

追加で説明

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &cleanTextEasy
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

テキストの入力欄の文字をカラにする。

分割テキストの場合、全ての入力欄をカラにする。

単純な処理で作っているため、
二行以上のテキスト や 二行以上のアイテム の中で記入している場合、実行元を認識できない。

実行元の入力欄の文字をカラにする場合は、 &cleanText か &cleanTextExecutor を使う必要がある。

引数全て

    意味をなさない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &editItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------
Alt+Enter

アイテム一覧 を表示する。

引数に アイテム名 を入れると、 アイテムの登録のウインドウ が、編集モードで表示する。

-e を引数にした場合、 入力補完の一覧 を表示する。

引数がファイルパスなら、そのファイルのプロパティが表示する。
Alt+Enter がショートカットキーだったので、オマケでそうなるようにした。

引数なし

    アイテム一覧 を表示する。
アイテム名

    アイテムの登録のウインドウが編集モードで表示する。
-e

    入力補完の一覧 を表示する。
ファイルパス

    そのファイルのプロパティを表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &enterForLastWord
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

テキストの文字で自動的に実行 の設定の、 Enterを実行する と同じ処理。

テキストの文字で自動的に実行 で、追加設定できるように用意している。

設定 の 自動で入力補完を表示しない のチェックが無い場合、
入力補完が表示している時も、処理を実行する。

引数全て

    意味をなさない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &hotkeyAllGroundEdit
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

キーの一覧 を表示する。

引数にキー名を入れると、 常時使用のキーを登録 するＧｕｉが、編集モードで表示する。

キー名は Ctrl+Alt+Shift+a の形式で指定する。

ウインドウタイトルの指定が必要になる場合がある関係上、
テキスト上のキー &hotkeyOnTextEdit の時と違い、
キー名は、 ^!+a の形式では認識できない。

ウインドウタイトルがある場合は、
_ アンダーバー でつなげた
[キー名]_[ウインドウタイトル]
を間違えずに正しく記入しなければならない。
キーの一覧 の 常時使用 のタブ内のリストにあるキー名と同じ文字。

引数なし

    キーの一覧 のＧｕｉを表示する。
引数全て

    キー名なら、 常時使用のキーを登録 するＧｕｉが、編集モードで表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &hotkeyAllGroundNew
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

常時使用のキーを登録 のＧｕｉを表示する。

引数があった場合、その文字を 実行スクリプト に記入する。

引数なし

    常時使用のキーを登録 のＧｕｉを表示する。
引数全て

    その文字を 実行スクリプト に記入して、 常時使用のキーを登録 のＧｕｉを表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &hotkeyOnTextEdit
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------
Alt+Shift+Enter

-----------------------------------------------------

キーの一覧 のＧｕｉを表示する。

引数にキー名を入れると、 テキスト上のキーを登録するＧｕｉが、編集モードで表示する。

キー名は、 ^!+a の形式でも、
Ctrl+Alt+Shift+a の形式でもよい。

引数なし

    キーの一覧 のＧｕｉを表示する。
引数全て

    キー名なら、 テキスト上のキーを登録するＧｕｉが、編集モードで表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &hotkeyOnTextNew
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------
Ctrl+Shift+N

-----------------------------------------------------

テキスト上のキーを登録するＧｕｉを表示する。

引数があった場合、その文字を 実行スクリプト に記入する。

引数なし

    テキスト上のキーを登録するＧｕｉを表示する。
引数全て

    その文字を 実行スクリプト に記入して、テキスト上のキーを登録するＧｕｉを表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &more
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

ファイル読み込み用 のＧｕｉに、引数の文字を表示する。

ファイルの中身を表示するのではなく、あくまで引数の文字を表示するだけである。

<<< のテストで使うためにあるようなもの。
例

&more  B_OutputFile
B_OutputFile の文字が表示されるだけ。

&more  %B_OutputFile%
%B_OutputFile% の文字が表示されるだけ。

&more  <<<  %B_OutputFile%
trrEvery\user\output.txt のファイルの中身を表示。

ファイルを読み込むなら、 &readFile が別に存在している。

引数全て

    ファイル読み込み用 のＧｕｉに、引数の文字を表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &moreTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&more と同じだが、 % % や # # で囲まれた文字を展開して表示する。
例

&moreTextOut  B_OutputFile
B_OutputFile の文字が表示されるだけ。

&moreTextOut  %B_OutputFile%
trrEvery\user\output.txt のファイルパスが表示される。

&moreTextOut  <<<  %B_OutputFile%
trrEvery\user\output.txt のファイルの中身を表示。
ファイルの中身に、 % % や # # で囲まれた文字があったら、その文字を展開して表示する。

引数全て

    % % や # # で囲まれた文字を展開して、
    ファイル読み込み用 のＧｕｉに、引数の文字を表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &newItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------
Ctrl+N

-----------------------------------------------------

アイテムの登録 のＧｕｉを表示する。

引数に文字を入れると、その文字が リンク先 に記入される。

引数がファイルパスだった場合、
アイテム名 に拡張子を除いたファイル名が記入される。

作業フォルダ にも文字が入るが、それは リンク先 の文字が変わったときの影響で、 &newItem の影響ではない。

引数が 1 なら、 ソフト・ファイル を選択状態にする。
引数が 2 なら、 フォルダ を選択状態にする。
引数が 3 なら、 スクリプト を選択状態にする。
引数が 4 なら、 二行以上のアイテム を新規登録するＧｕｉを表示する。
引数が -2gyo なら、 二行以上のアイテム を新規登録するＧｕｉを表示する。

いずれも、その後に続く引数が リンク先 に記入される。

引数なし

    アイテムの登録のウインドウ を表示する。
引数全て

    文字を入れると、その文字が リンク先 に記入される。

    ファイルパスの場合、 アイテム名 の入力欄に拡張子を除いたファイル名が記入される。

引数1

1

    ソフト・ファイル を選択状態にする
    その後に続く引数が リンク先 に記入される。
2

    フォルダ を選択状態にする
    その後に続く引数が リンク先 に記入される。
3

    スクリプト を選択状態にする
    その後に続く引数が リンク先 に記入される。
4

    二行以上のアイテム を新規登録するＧｕｉを表示する。
    その後に続く引数が スクリプト に記入される。
-2gyo

    二行以上のアイテム を新規登録するＧｕｉを表示する。
    その後に続く引数が スクリプト に記入される。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &newMultipleItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

二行以上のアイテム を新規登録するＧｕｉを表示する。

引数の文字が、 スクリプト に記入される。

おまけとして、 `n の文字は、改行に置換される。

&newItem  4 の時と同じ動作。

引数なし

    二行以上のアイテム を新規登録するＧｕｉを表示する。
引数全て

    引数の文字が、 スクリプト に記入される。

    `n の文字は、改行に置換される。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsTestType3
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

タイプ3の規定のコマンドの引数の実験のために用意してある。

引数全て

    この文字などがどのように規定のコマンドに渡されるかの確認のための出力。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToFileAssignAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を、指定のファイルに出力する。

追加で出力する。
後、最後に改行を加える。

引数1にファイルパスを指定する。
引数1の % % や # # で囲まれた文字は展開される。

スペースが含まれるファイルパスを指定すると、引数1として認識できない。
よって、 %varName% や #itemNmae# の形にして指定する必要がある。

設定 の 空白のあるファイルパスを自動的に調べて対応する、という処理をしない の設定は、ここでは無意味である。
" " で括って、一つの引数として扱う方法も、ここでは使えない。

ただし、「引数を,で区切るルール」は使えるので、それを使う方法もある。

残りの引数全てが
指定したファイルに出力する文字になる。

引数1

    ファイルパスを指定する。
    % % や # # で囲まれた文字は展開される。
残りの引数全て

    ファイルに出力する文字。
    追加で出力する。
    後、最後に改行を加える。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToFileAssignAddLinefeedTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToFileAssignAddLinefeed と同じ。
% % や # # で囲まれた文字を展開して出力する。

引数1

    ファイルパスを指定する。
    % % や # # で囲まれた文字は展開される。
残りの引数全て

    ファイルに出力する文字。
    追加で出力する。
    後、最後に改行を加える。
    % % や # # で囲まれた文字を展開する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToMultipleText1AddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を、 二行以上のテキスト に出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    二行以上のテキスト に出力する文字になる。
    追加で出力する。
    後、最後に改行を加える。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToMultipleText1AddLinefeedTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToMultipleText1AddLinefeed と同じ。
% % や # # で囲まれた文字を展開して出力する。

おまけで、 Transform, , Deref を使用して、
`n や `t といった文字も、改行やタブに変換されるようにしている。

引数全て

    二行以上のテキスト に出力する文字になる。
    追加で出力する。
    後、最後に改行を加える。
    % % や # # で囲まれた文字を展開する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToOutFileAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を
trrEvery\user\output.txt のファイルに出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    trrEvery\user\output.txt のファイルに出力する。
    追加で出力する。
    後、最後に改行を加える。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToOutFileAddLinefeedTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToOutFileAddLinefeed と同じ。

% % や # # で囲まれた文字を展開して出力する。

引数全て

    trrEvery\user\output.txt のファイルに出力する。
    追加で出力する。
    後、最後に改行を加える。
    % % や # # で囲まれた文字を展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToOutGuiAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を、 蓄え式説明表示 に出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    蓄え式説明表示 に出力する。
    追加で出力する。
    後、最後に改行を加える。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToOutGuiAddLinefeedTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToOutGuiAddLinefeed と同じ。

% % や # # で囲まれた文字を展開して出力する。

引数全て

    蓄え式説明表示 に出力する。
    追加で出力する。
    後、最後に改行を加える。
    % % や # # で囲まれた文字を展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextEditExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を、実行元のテキストに出力する。

前にあった文字は消して上書きで出力する。

一行テキスト 、 分割テキスト のみが対象になる。
二行以上のテキスト では対象にならない。

分割テキスト で動作させていた場合、フォーカスされている入力欄の文字に出力する。

一応、 &parsentss や &sharpss のようなものを自作する時のために用意している。

F_getTextEditExecutor( ) と、
この &outArgsToTextEditExecutor と
&sendEndToTextEditExecutor を使えばそれが可能かもしれない。

引数全て

    実行元のテキストに出力する。
    前にあった文字は消して上書きで出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextEditExecutorTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToTextEditExecutor と同じ。

% % や # # で囲まれた文字を展開して出力する。

引数全て

    実行元のテキストに出力する。
    前にあった文字は消して上書きで出力する。
    % % や # # で囲まれた文字を展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextGuiAssign
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

どのテキストかを指定して、そのテキストに文字を出力する。

引数1に、テキストのＧｕｉの番号を
引数2に、上から何番目の入力欄かを指定する。

残りの引数が出力する文字になる。

前にあった文字は消して上書きで出力する。

テキストのＧｕｉの番号は、
B_GuiNumText1 などの変数を使って、 %B_GuiNumText1% などの使い方で指定する事を勧める。

ストックにも可能。
二行以上のテキストにも可能。
しかし、説明表示系のＧｕｉには使用できない。

引数1

    テキストのＧｕｉの番号
    % % や # # で囲まれた文字は展開する。
引数2

    上から何番目の入力欄か。
    % % や # # で囲まれた文字は展開する。
残りの引数全て

    指定のテキストの入力欄に出力する。




＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextGuiAssignAdd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToTextGuiAssign と同じ。

こちらは、前にあった文字に追加して出力する。
最後に改行を付け足したりはしない。

引数1

    テキストのＧｕｉの番号
    % % や # # で囲まれた文字は展開する。
引数2

    上から何番目の入力欄か。
    % % や # # で囲まれた文字は展開する。
残りの引数全て

    指定のテキストの入力欄に追加して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextGuiAssignAddTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToTextGuiAssign と同じ。

% % や # # で囲まれた文字を展開して、
前にあった文字に追加して出力する。
最後に改行を付け足したりはしない。

特別に、
Transform, , Deref を使用して、
`n や `t といった文字も、改行やタブに変換されるようにしている。

引数1

    テキストのＧｕｉの番号
    % % や # # で囲まれた文字は展開する。
引数2

    上から何番目の入力欄か。
    % % や # # で囲まれた文字は展開する。
残りの引数全て

    指定のテキストの入力欄に追加して出力する。
    % % や # # で囲まれた文字は展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTextGuiAssignTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToTextGuiAssign と同じ。

% % や # # で囲まれた文字を展開して出力する。

特別に、
Transform, , Deref を使用して、
`n や `t といった文字も、改行やタブに変換されるようにしている。

前にあった文字は消して上書きで出力する。

引数1

    テキストのＧｕｉの番号
    % % や # # で囲まれた文字は展開する。
引数2

    上から何番目の入力欄か。
    % % や # # で囲まれた文字は展開する。
残りの引数全て

    指定のテキストの入力欄に出力する。
    % % や # # で囲まれた文字は展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTmpOutGui
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数を、 一時的な説明表示 に出力する。

前にあった文字は消して上書きで出力する。

引数全て

    一時的な説明表示 に出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outArgsToTmpOutGuiTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&outArgsToTmpOutGui と同じ。

% % や # # で囲まれた文字を展開して出力する。

引数全て

    一時的な説明表示 に出力する。
    % % や # # で囲まれた文字を展開して出力する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outErrFileToFileGui
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

trrEvery\user\errorOutput.txt のファイルを エラー表示 に出力する。

前にあった文字は消して上書きで出力する。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outErrGuiToErrFileAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

エラー表示 にある文字を
trrEvery\user\errorOutput.txt のファイルに出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outOutFileToFileGui
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

trrEvery\user\temp\outputTmp.txt のファイルを 蓄え式説明表示 に出力する。

前にあった文字は消して上書きで出力する。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outOutGuiToOutFileAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

蓄え式説明表示 にある文字を
trrEvery\user\output.txt のファイルに出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outTmpOutGuiToOutFileAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

一時的な説明表示 の文字を
trrEvery\user\output.txt のファイルに出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outTmpOutGuiToOutGuiAddLinefeed
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

一時的な説明表示 の文字を
蓄え式説明表示 に出力する。

追加で出力する。
後、最後に改行を加える。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outTmpOutGuiToText
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

一時的な説明表示 の文字をテキストに出力する。

前にあった文字は消して上書きで出力する。

一時的な説明表示 の文字の前後にある改行は取り除かれる。
現時点では

テキスト2 に表示するようになっている。
実行元テキストがどれであろうとそれは変わらない。

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &outTmpOutGuiToTmpFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

一時的な説明表示 の文字を
trrEvery\user\temp\outputTmp.txt のファイルに出力する。

その際、そのファイルを一度削除した後で、そのファイルに出力する。
上書き保存の様にするため

引数全て

    引数に意味はない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendEndToTextEditExecutor
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

実行元のテキストのカーソルを右端に移動する。

一行テキスト 、 分割テキスト のみが対象になる。
二行以上のテキスト では対象にならない。

分割テキスト で動作させていた場合、フォーカスされている入力欄のカーソルを移動する。

一応、 &parsentss や &sharpss のようなものを自作する時のために用意している。

F_getTextEditExecutor( ) と、
&outArgsToTextEditExecutor と
この &sendEndToTextEditExecutor を使えばそれが可能かもしれない。

引数全て

    意味をなさない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendPaste
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

引数の文字を貼り付ける。
動作的には、 Ctrl+V を送信する。

変数などを使用する場合は、
&sendPasteTextOut の方を使う。
使う際の注意1

何回かに 1回、前にクリップボードにあった文字の方を 貼り付けてしまう。

いつでも、 Ctrl+Z などでやり直しが効く状況でのみ使用する事を勧める。
使う際の注意2

これを使った場合、
クリップボードに前にあったものを一旦保存して
引数の文字をクリップボードに使って、
前にあったものを戻すという事をしている。

なので、クリップボードを監視しているソフトを使っている場合は、
履歴の順番がバラバラになる。

引数全て

    貼り付ける文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendPasteFromFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

ファイルパスを指定。

ファイルの文字を全て貼り付ける。
動作的には、 Ctrl+V を送信する。
使う際の注意

何回かに 1回、前にクリップボードにあった文字の方を 貼り付けてしまう。

いつでも、 Ctrl+Z などでやり直しが効く状況でのみ使用する事を勧める。

引数全て

    ファイルパスを指定する。
    ファイルパスの % % や # # で囲まれた文字は展開する。
    ファイルの文字を全て貼り付ける。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendPasteFromFileTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&sendPasteFromFile と同じ。

ファイルの中の文字の、
% % や # # で囲まれた文字も展開する。

    ファイルパスを指定する。
    ファイルパスの % % や # # で囲まれた文字は展開する。
    ファイルの文字を全て貼り付ける。
    ファイルの中の文字の、
    % % や # # で囲まれた文字も展開する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendPasteTextOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&sendPaste と同じ。

% % や # # で囲まれた文字を展開する。

引数の文字を貼り付ける。
動作的には、 Ctrl+V を送信する。
使う際の注意

何回かに 1回、前にクリップボードにあった文字の方を 貼り付けてしまう。

いつでも、 Ctrl+Z などでやり直しが効く状況でのみ使用する事を勧める。

引数全て

    貼り付ける文字。
    % % や # # で囲まれた文字を展開する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendScriptToText
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

テキストのGuiの番号と スクリプトを指定して、
指定したテキスト上で 指定したスクリプトを実行する。

用途が分かりにくいかもしれないが、これは別のテキストから別のテキストを操作したり、
Guiのコントロールで追加したボタンといったものからテキストを操作するために用意しているものである。

指定した テキスト上で実行できるので、 &parsentss を指定して、
テキストの文字を % % で囲むボタンといったものを作る時に利用価値がある。

引数１に 一行テキスト か 分割テキスト のGuiの番号を指定する。
それ以外のGuiの番号は指定できない。

%B_GuiNumText1% 等を指定する。

引数１のみ、 % % や # # がテキストアウトされる。

指定した テキスト が最前面に表示されて実行される。

なお、指定した テキスト が閉じていたとしても表示されて実行される。

引数１に any を指定すると、 テキスト の中で、一番前面にあるテキストを対象にする。

一行テキスト か 分割テキスト が対象。

この any を指定した場合、 テキスト が全て閉じていた場合はエラー文が表示される。

引数２に 実行スクリプトを指定する。
引数２というより、引数１以外は全てこの部分になる。

指定した テキスト上で、その実行スクリプトを実行する。

テキストに文字が記入されていた場合、 この実行スクリプトの引数として扱われる。
[引数２以降の文字] ＋ スペース ＋ [テキストの文字]

このスクリプトで実行される。

テキスト上のキーの実行スクリプトと似ていると思ってよい。

末尾に %-- を指定しておくと、 テキストの文字を後に続く引数として扱わないようにする。

引数１と違って、こちらの引数は
% % や # # はテキストアウトされない。

なおこの処理は、スレッドを別にして実行させている理由から、少しだけ遅れて実行される。

引数1

    テキスト のGuiの番号を指定する。
    % % や # # で囲まれた文字はテキストアウトされる。

    any

        テキストの中で、一番前面にある テキスト を対象にする。

残りの引数全て

    実行する処理を指定する。

    末尾に %-- を指定しておくと、 テキストの文字を後に続く引数として扱わないようにする。

    引数１と違って、こちらの引数は
    % % や # # はテキストアウトされない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &sendTextItself
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

テキスト自身にも、 Send の Ahkコマンド を送る。

TRR上では、 Send の Ahkコマンド を使用すると、
実行元のテキストを隠してからそれを実行する仕様になっている。

もし、 テキスト自身にキーを送りたい場合、これを使えば
テキストを隠すことをしないので、それが可能になる。

Send と同じキーの指定になる。

ただし、 TRR の規定のコマンドなので , でなく スペース で区切る。

「引数を,で区切るルール」を使う事はできる。
現時点では

テキスト上でしかキーを送信しないようにしている。

それ以外のウインドウがアクティブなら、キーは送信されない。
例1

&sendTextItself  {End}  %--
などをストックに入れるか、 テキスト上のキーに登録して使う。

%-- を指定しないと、テキスト上の文字が追加する引数になってしまう点に注意がいる。
例2
&hotkeyOnTextNewFromCommand  ,  Ctrl+e  ,  &sendTextItself  {End}  %--

を実行すると、

その後は、 テキスト上で Ctrl+E を押すと、
Endキー を使用できるようになる。

引数に return を指定すると、あえて何も動作しないようにする。
&sendTextItself  return

引数全て

    Send の Ahkコマンドと同じキーの指定。
return

    あえて何も動作しない様にする時に使う。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &stockAddBlue
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

ストック一覧の青い方の入力欄に追加する。

引数が追加する文字になる。

すでに入力欄 1 に文字があれば、入力欄 2 に。
すでに入力欄 2 に文字があれば、入力欄 3 に追加される。
入力欄が全て埋まっていれば何もできない。

セーブまではしない。入力欄に追加するだけ。

ストックのＧｕｉは表示した後、自動で閉じる。
閉じる秒数は設定で変更可。

引数全て
    ストック一覧の青い方の入力欄に追加する文字。 


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 &stockAddGreen
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ3

-----------------------------------------------------

&stockAddBlue と同じ。
こちらは、緑の方のストック一覧の入力欄に追加する。

引数が追加する文字になる。

すでに入力欄 1 に文字があれば、入力欄 2 に。
すでに入力欄 2 に文字があれば、入力欄 3 に追加される。
入力欄が全て埋まっていれば何もできない。

セーブまではしない。入力欄に追加するだけ。

ストックのＧｕｉは表示した後、自動で閉じる。
閉じる秒数は設定で変更可。

引数全て
    ストック一覧の緑の方の入力欄に追加する文字。 

