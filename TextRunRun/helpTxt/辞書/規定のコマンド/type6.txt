









引数は、半角スペースで分割されて、
それが引数の一つとして扱われる。

設定 の 空白のあるファイルパスを自動的に調べて対応する、という処理をしない の設定で、半角スペースのあるファイルパスが一つの引数になるか、複数の引数に分かれるかが決まる。

" " で囲むと、スペース があっても、分割する区切りとして扱わない。

その後、１つの引数の前後にある " " は取り除かれる。

none の文字を入れてたら、文字がカラの一つの引数として扱われる。
引数を一つ飛ばすときに使える。
ただし現時点では必要になるケースはない。
補足

"" と入力してもそれと同じ。
%varName% のように、カラの変数名を使う方法もある。

## タイプ 6 の特徴
### <<< の動作
読み込む
### 履歴に残すか
残す
### &&& の動作
認識して処理する
### >>> の動作
認識して処理する
### %% と ## を展開するかどうか
展開する
### " " で囲まれた文字

スペースで分割されない。

%% や ## で囲まれた文字は展開されず、そのままになる。

&&& や >>> は特別な文字として認識しない。

１つの引数の前後に、 " " の文字がある場合は、実行前の段階で削除される。
引数の前後ではなく、中に含まれている " " の文字はそのままになる。
### 分割テキストでの動作

それぞれの入力欄の文字が１つの引数として扱われる。
半角スペースを使用しても、意味がない。
引数が 4 つ必要な場合は、 4 つの入力欄に記入しなければならない。
半角スペースでは区切れない。

&&& や >>> を認識して実行するが、
&&& や >>> の引数
の入力欄 8つめの入力欄 でなければ認識しない。
### 引数を,で区切るルール

タイプ6は全ての規定のコマンドで、このルールが適用される。

引数1が , だった場合、
スペース区切りではなく , が引数の区切りの文字として扱われ、その文字で分割する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &addWordListAdd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

入力補完に追加する。

一つだけの追加となる。
trrEvery\user\addList\addWordList.txt

のファイルを使うと「追加の単語」として入力補完に表示する文字を追加できるが、それと同じ種類に追加する。

引数1に追加する文字を。

引数2に説明文を。

当然、無くてもよい。

改行を指定する場合は ###n の文字を入れておけば、改行に変換される。
補足

&addWordListAddFromFile を使えば、ファイルを指定して「追加の単語」を追加できる。

引数1

    追加する文字。
引数2

    説明文。
    ###n の文字が改行になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &cleanTextAssign
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

テキスト の入力欄の文字をカラにする。

テキスト に数字を指定して、どのウインドウが対象かを指定する。

例
&cleanTextAssign %A_Gui%

引数２に、
上から何番目の入力欄をカラにするかを指定できる。

数字を指定する。
&cleanTextAssign %B_GuiNumTextSplit1% 2

引数２に指定があれば、 その指定の入力欄のみカラにする。

引数２に指定が無ければ、 一番上の入力欄のみカラにする。

しかし、 分割テキスト の場合、
引数２に指定が無ければ、全ての入力欄をカラにする。

引数1

    テキストのＧｕｉの番号を指定する。
引数2

    数字を指定する。
    上から何番目の入力欄をカラにするかを指定。
    指定があれば、指定の入力欄のみカラにする。
    指定が無ければ、一番上の入力欄のみカラにする。

    分割テキスト の場合は、ここが未指定の場合、全ての入力欄をカラにする。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &config
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

設定 のＧｕｉを表示する。

引数で、設定を操作する事もできる。

引数1で操作する項目を指定し、
引数2で on か off を指定する。

True か False。 または 1 か 0 でも可能。

O_spaceFileNotFlag などの変数に代入する場合でも同じ様なことができるが、
こちらは、設定を変更しただけで、設定内容をファイルに保存はしない。

この &config を使った変更の場合、
設定を変更しただけでなく、設定した内容をファイルに保存もする。
よって、 TRR を再起動した場合も影響が続く。

以下の 2つの例は同じ設定になるが、保存するかどうかが違う。

SetO_spaceFileNotFlag( True )
設定ファイルは扱わない。

&config  -space
設定ファイルに保存もする。

引数なし

    設定のＧｕｉを表示する。

引数1

-space

    空白のあるファイルパスを自動的に調べて対応する、という処理をしない。 の項目を操作。
-clickgui

    起動時にマウス操作のためのウインドウを表示しない。 の項目を操作。
-lastword

    テキストの文字で自動的に実行 の設定の、 項目1 のタブにある、
    最後の文字によって、自動的に実行する。 の項目を操作。

    ただし、 項目1 のタブにある、
    最後の文字によって、自動的に実行する。 の項目しか操作できない。

    他のタブの項目は
    O_lastWordTabAllFlag2 の変数などに代入する方法でなければ設定できない。
-popup

    自動で入力補完を表示しない の項目を操作。
-startupflag

    起動時に実行する1 オン／オフ式 の項目を操作。

    &startupFlag  [ on / off ]
    を使用しても同じ動作をする。
-startuptext

    起動時に実行する1 オン／オフ式 の
    実行する処理 の項目を操作。

    引数2に実行する処理を記入する。

    現時点では、「実行する処理」にスペースがあると、それ以降は無視されてしまう。
    その場合、 " " で囲めば、囲んだ中身が引数2と判別される。

引数2

    on か off を指定する。

    True か False。 または 1 か 0 でも可能。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &fullPathAssign
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

相対パスを絶対パスに変える。

引数1に基準となるフォルダを指定する。

引数2に絶対パスに変換したい相対パスのファイルパスを指定する。

「基準となるフォルダ」からの相対パスを指定する。

基準となるフォルダから判断した、相対パスを絶対パスに変える。
入力欄に表示する。

設定 の 空白のあるファイルパスを自動的に調べて対応する、という処理をしない の設定の影響を受ける。

この設定がオンなら、空白のあるファイルパスは認識できない。

使用例
&fullPathAssign  %A_MyDocuments%  ..\Downloads

引数1

    基準となるフォルダ。
引数2

    引数1に指定した、「基準となるフォルダ」からの相対パス。
    この相対パスがファイルパスと判断されたら絶対パスにして、入力欄に表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &getObj
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

オブジェクトの中身を調べる。

引数1がオブジェクトなら、オブジェクトの中身を表示する。
諸注意

TRR上では、オブジェクトは使用できない。

引数1

    オブジェクトなら、オブジェクトの中身を表示する。
引数2

    引数1がオブジェクトなら、さらにそのキーを入れると、そのキーの中身を表示。
引数3

    引数2がオブジェクトなら、さらにそのキーを入れると、そのキーの中身を表示。
引数4

    引数4がオブジェクトなら、さらにそのキーを入れると、そのキーの中身を表示。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &hotkeyAllGroundNewFromCommand
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

常時使用のキーを登録する。

常時使用できるキーの登録 のＧｕｉを使ってキーを登録したときと違い、
ファイルに設定を保存したりしないので、再起動すると、全て無かったことになる。

キーの一覧 で見ると コマンドから登録 と表示される。

引数1にキー名を、

引数2に実行する処理を指定する。

`n の文字は改行に変換される。
この文字を使えば複数行のスクリプトを一行で書くことができる。
つまり、複数の処理が実行できるスクリプトが書ける。

Ahkコマンド の
Hotkey,  KeyName  [,  Label,  Options]
に書式が似ているが、
TRR の規定のコマンドなので、半角スペースで区切る。
Ahkコマンド は , で区切る。

そして、サブルーチン名ではなく、実行する処理を指定する。

キー名は
Ctrl+a の形式でも良いし、
+^!a の形式でも良い。

再起動した後も使用したい場合は、
起動時に実行するアイテム の中で使用するようにする。

引数2に
off を指定すると
キー名に既に登録していたキーがあった場合、そのキーをオフにする。

引数2に
on を指定すると
キー名を off にしていた場合、そのキーをオンにする。

特定のウインドウでのみ動作させたい場合は、
引数3にウインドウタイトルを指定する。

引数1

    キー名を指定する。
    キー名は
    Ctrl+a の形式でも良いし、
    +^!a の形式でも良い。
引数2

    実行する処理を記入する。
    `n の文字は改行に変換される。
    この文字を使えば複数行のスクリプトを一行で書くことができる。

    実行する処理にスペースがあった場合、引数2として扱われないため、スペースより右は引数3以降と判定される。
    その場合、実行する処理を " " で囲むとスペースがあっても、分割されずにすむ。

off
    引数1のキー名が、既に登録してあるキーだった場合、
    そのキーをオフの状態にする。 
on
    キー名をオフの状態にしていた場合、
    そのキーをオンにする。 

引数3
    特定のウインドウでのみ動作させたい場合は、 ウインドウタイトルを指定する。 

追加で説明

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &hotkeyOnTextNewFromCommand
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

テキスト上のキーを登録する。

テキスト上のキーの登録 のＧｕｉを使ってキーを登録したときと違い、
ファイルに設定を保存したりしないので、再起動すると、全て無かったことになる。

キーの一覧 で見ると コマンドから登録 と表示される。

引数1にキー名を、

引数2に実行する処理を指定する。

Ahkコマンド の
Hotkey,  KeyName  [,  Label,  Options]
に書式が似ているが、
TRR の規定のコマンドなので、半角スペースで区切る。
Ahkコマンド は , で区切る。

そして、サブルーチン名ではなく、実行する処理を指定する。

キー名は
Ctrl+a の形式でも良いし、
+^!a の形式でも良い。

再起動した後も使用したい場合は、
起動時に実行するアイテム の中で使用するようにする。

引数2に
off を指定すると
キー名に既に登録していたキーがあった場合、そのキーをオフにする。

引数2に
on を指定すると
キー名を off にしていた場合、そのキーをオンにする。

引数1

    キー名を指定する。
    キー名は
    Ctrl+a の形式でも良いし、
    +^!a の形式でも良い。
引数2

    実行する処理を記入する。

    実行する処理にスペースがあった場合、引数2として扱われないため、スペースより右は無視される。
    その場合、実行する処理を " " で囲むとスペースがあっても、分割されずにすむ。

off
    引数1のキー名が、既に登録してあるキーだった場合、
    そのキーをオフの状態にする。 
on
    キー名をオフの状態にしていた場合、
    そのキーをオンにする。 

追加で説明

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &itemReloadOneFromFileName
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

fromFileName から登録する アイテム を一つだけ再読み込みする。

引数に アイテム名 を指定する。
fromFileName の item フォルダの中にその アイテム名 の情報があれば、それを登録する。

既に アイテム が登録されている場合は、そのアイテムの情報は無くなり上書きされる。

まだ アイテム が登録されていなければ新規登録扱いになる。

新規登録の場合は、引数に カテゴリーフォルダ を指定する必要がある。

引数1に カテゴリーフォルダ を指定する
そして引数2に アイテム名 の指定をする。

アイテムのカテゴリーフォルダに アイテムの情報がある場合、
フォルダ名の最後に _ があるフォルダ。
このフォルダはアイテムではなくアイテムのカテゴリー用のフォルダになる。
引数2に アイテムのカテゴリーフォルダ を指定する必要がある。
そして引数3に アイテム名 の指定をする。

カテゴリーフォルダについて一応あげておきます。

普通の使い方 カテゴリーフォルダ

編集の場合は引数の指定は、 アイテム名 1つで良い。
アイテム の情報から カテゴリーフォルダ と アイテムのカテゴリーフォルダ の情報を取得して対応できるようにしている。
むしろ引数2と3は省略した方がよい。

引数を 2 つのみ指定した場合は、
カテゴリーフォルダ と アイテム名 のみを指定している事になる。
この場合、 アイテムのカテゴリーフォルダ は指定されていないものとされる。

アイテムのカテゴリーフォルダ を指定する場合は引数を 3つ指定する事になる。
つまり、この場合は引数1に カテゴリーフォルダ を必ず指定しなければならない事になる。

なお、新規登録の場合で引数1のみを アイテム名 のみを 指定した場合、
カテゴリーフォルダ は first を指定した事になるようにしている。

今説明した事の繰り返しになるが、ここで引数の数による違いで説明する
引数が1つの場合

引数に アイテム名 を指定する。

編集の場合は、
カテゴリーフォルダ と アイテムのカテゴリーフォルダ は アイテム の情報から取得するのでこの場合でよい。

新規登録の場合は、
カテゴリーフォルダ は first を指定しているものとして扱う。
アイテムのカテゴリーフォルダ は無い場合として扱う。
引数が2つの場合

引数1 に カテゴリーフォルダ を、

引数2 に アイテム名 を指定する。

編集の場合は、
アイテムのカテゴリーフォルダ のみを アイテム の情報から取得する。

新規登録の場合は、
アイテムのカテゴリーフォルダ は無い場合として扱う。
引数が3つの場合

引数1 に カテゴリーフォルダ を、

引数2 に アイテムのカテゴリーフォルダ を、

引数3 に アイテム名 を指定する。

新規登録の場合で アイテムのカテゴリーフォルダ がある場合は必ずこの場合の指定をしないといけない。

似たようなものとして、
F_itemReloadOneFromFileName(  )
の関数がある。

出来ることは同じである。
ただし、こちらはエラーしたかどうかを、返り値から取得できるという違いがある。

引数1

    引数が1つの場合
    アイテム名 を指定する。
    編集の場合は、
    カテゴリーフォルダ と アイテムのカテゴリーフォルダ は アイテム の情報から取得する。
    新規登録の場合は、
    カテゴリーフォルダ は first を指定しているものとして扱う。

    引数が2つの場合
    カテゴリーフォルダ を指定する。

    引数が3つの場合
    カテゴリーフォルダ を指定する。
引数2

    引数が2つの場合
    アイテム名 を指定する。
    編集の場合は、
    アイテムのカテゴリーフォルダ は アイテム の情報から取得する。
    新規登録の場合は、
    アイテムのカテゴリーフォルダ は無い場合として扱う。

    引数が3つの場合
    アイテムのカテゴリーフォルダ を指定する。
引数3

    引数が3つの場合
    アイテム名 を指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &newItemFromCommand
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

アイテム を登録する。

&newItem で表示するＧｕｉを使って アイテム を登録したときと違い、
ファイルに設定を保存したりしないので、再起動すると、全て無かったことになる。

アイテム一覧 で見ると コマンドから登録 と表示される。

以下の指定の仕方になる。
引数1 	種類
1 から 4 の数字で指定
引数2 	アイテム名
引数3 	リンク先
引数4 	引数
引数5 	作業フォルダ
引数6 	" "を付けるかどうか

True か False 。
1 か 0 。

アイテム登録のＧｕｉと同じ様な項目になっている。

引数がカラの部分は、初期値が代わりに設定される。

引数1の種類

1 から 4 の数字を指定する。
1 ソフト・ファイル
2 フォルダ
3 スクリプト
4 二行以上のアイテム

引数2のアイテム名

特に注意点はない。

引数3のリンク先

引数1が 4 二行以上のアイテム の場合、
`n の文字が改行に変換される。
この文字を使うことで、複数行のスクリプトを一行で書ける。

引数4の引数

引数1が 1 ソフト・ファイル の時のみ使用可能。

引数5の作業フォルダ

引数1が 1 ソフト・ファイル の時のみ使用可能。

注意点がある。
アイテム登録のＧｕｉで登録する時と違う点がある。

作業フォルダをカラにして登録した場合である。

アイテム登録のウインドウ で登録する時は、カラで登録され、 実行時には、 %A_WorkingDir% から実行するのと同じ扱いになる。

しかし、ここでカラにして登録した場合、
引数3で指定したリンク先が存在するフォルダ 親フォルダ が登録されるようになっているという違いがある。

引数6の " " を付けるかどうか

引数のファイルパスを自動的に""で囲むようにする の設定と同じ。

引数1が 1 ソフト・ファイル の時のみ使用可能。

True か False または 1 か 0 で指定する。

指定がなければ、 False になる。

スペースがあるファイルパスなどを指定する場合は、
" " で囲むと、一つの引数扱いになるのでそれを利用するとよい。

再起動した後も使用したい場合は、
起動時に実行するアイテム の中で使用するようにする。

引数1

    種類
    1 から 4 の数字を指定する。

    1 ソフト・ファイル
    2 フォルダ
    3 スクリプト
    4 二行以上のアイテム
引数2

    アイテム名
引数3

    リンク先

    引数1が 4 二行以上のアイテム の場合、
    `n の文字が改行に変換される。
引数4

    引数

    引数1が 1 ソフト・ファイル の時のみ使用可能。
引数5

    作業フォルダ

    引数1が 1 ソフト・ファイル の時のみ使用可能。
    ここをカラにして登録した場合、
    引数3で指定したリンク先が存在するフォルダ 親フォルダ が登録されるようになっている。
引数6

    " " を付けるかどうか

    引数1が 1 ソフト・ファイル の時のみ使用可能。
    True か False または 1 か 0 で指定する。
    指定がなければ、 False になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &outArgsTestType6
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

タイプ6の規定のコマンドの引数の実験のために用意してある。

タイプ6の規定のコマンドは、引数が空白で分割されてから渡されるため、
ここで確認しないと、分かりにくいものが多い。

引数1から引数6

    この文字などがどのように規定のコマンドに渡されるかの確認のための出力。
引数6

    タイプ6の規定のコマンドは、
    引数6、引数7、引数8までは、ここで扱われる。
    引数9以降は認識できないことがここで分かる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &pctime
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

オマケで作ったもの。
パソコンを起動してからの経過時間を表示する。

Windows10では、Shiftを押しながらシャットダウンした場合でないと、経過時間が続行されたままになる。

引数に意味は無い。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &pwd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

A_WorkingDir の位置を表示する。

引数に意味は無い。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &relativeAssign
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

絶対パスを相対パスに変える。

引数1に基準となるフォルダを指定する。

引数2に絶対パスのファイルパスを指定する。
「基準となるフォルダから」の相対パスに変換して、
入力欄に表示する。

設定 の 空白のあるファイルパスを自動的に調べて対応する、という処理をしない の設定の影響を受ける。
この設定がオンなら、空白のあるファイルパスは認識できない。

例
&relativeAssign  %A_MyDocuments%  %A_Desktop%

引数1

    基準となるフォルダ。
引数2

    絶対パスのファイルパスを指定する。
    「基準となるフォルダから」の相対パスに変換する。
    入力欄に表示する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &returnOutputGui
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

蓄え式の説明表示 の 再表示 のボタンと同じ。

蓄え式の説明表示 の文字を「保存していた文字」に置き換える。 「保存していた文字」に置き換える際、置き換える前の文字を「保存していた文字」にする。

最初に &returnOutputGui を使用した場合や、「保存していた文字」が無かった場合、
蓄え式の説明表示 は空白になる。

ちなみに、 蓄え式の説明表示 の Clean のボタンとを押すと、その「保存していた文字」に上書き保存する。

引数に意味は無い。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &setValue
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

変数に値を代入する。

引数1に変数名を指定する。

引数2に代入する値や文字列

引数1

    変数名。
引数2

    代入する値や文字列。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &setValueMultipleText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

二行以上のテキスト にある文字を変数に代入する。

引数に変数名を指定する。

引数1

    変数名。
    二行以上のテキスト にある文字を変数に代入する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &setValueTmpOutGui
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

一時的な説明表示 の文字列を変数に代入する。

引数に変数名を指定する。

文字列から、前後の空白や改行は取り除かれる。

引数1

    変数名。
    一時的な説明表示 の文字列を変数に代入する。
    文字列から、前後の空白や改行は取り除かれる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &snippetAdd
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

簡易入力を一つ追加する。

入力補完一覧 の、 簡易入力 のタブにあるのと同じもの。

その 簡易入力 のタブ内の 新規登録 ボタンを使って登録したときと違い、
ファイルに設定を保存したりしないので、再起動すると、全て無かったことになる。

この方法で登録した簡易入力は、 コマンドから登録 と表示される。

引数1に、キーになる文字を。

引数2に、展開する文字を。

引数3
最後にスペースを付けるかどうか。
True か False。 または 1 か 0 を指定する。
指定が無い場合 False になる。

引数1

    キーになる文字。
引数2

    展開する文字。
引数3

    最後にスペースを付けるかどうか。
    True か False。 または 1 か 0 を指定する。
    指定が無い場合 False になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &startupFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

設定 の 起動時に実行する1 オン／オフ式 の項目を操作。

引数に on か off または True か False。 または 1 か 0 を指定する。

&config  startupflag  [ on / off ]
と全く同じ。

引数1

    on か off または True か False。 または 1 か 0 を指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockChangeBlue
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

ストック一覧 の青の方 のリストの番号を変えてロードする。

引数に「リストの番号」を指定する。

引数が無い場合は、次の番号のリストに変える。

+[数字] で指定すると、今の番号から数字を足した分の番号のリストに変える。

-[数字] で指定すると、今の番号から数字を引いた分の番号のリストに変える。

- ハイフン で指定すると、今の番号から 1 を引いた分の番号のリストに変える。

以下の指定をすると、リストを変更するだけで、表示はしないように出来る。

-hide ストックのリストのを変更するが、表示はしない。

-tooltip ストックのリストのを変更するが、ツールチップで表示する。
リストのタイトルを表示する。

引数なし

    次の番号のリストのストックに切り替えて表示。

引数1

番号

    番号のリストのストックに切り替えて表示。
-

    1 を減らした番号のリストのストックに切り替えて表示。
+[数字]

    数字分プラスにスキップしたリストのストックに切り替えて表示。
-[数字]

    数字分マイナスにスキップしたリストのストックに切り替えて表示。
-hide

    ストックのリストのを変更するが、表示はしない。
    引数2に他の指定をするようになる。
-tooltip

    ストックのリストのを変更するが、ツールチップで表示する。
    リストのタイトルを表示する。
    引数2に他の指定をするようになる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockChangeGreen
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

&stockChangeBlue と同じ。

ストック一覧 の緑の方 のリストの番号を変えてロードする。

引数なし

    次の番号のリストのストックに切り替えて表示。

引数1

番号

    番号のリストのストックに切り替えて表示。
-

    1 を減らした番号のリストのストックに切り替えて表示。
+[数字]

    数字分プラスにスキップしたリストのストックに切り替えて表示。
-[数字]

    数字分マイナスにスキップしたリストのストックに切り替えて表示。
-hide

    ストックのリストのを変更するが、表示はしない。
    引数2に他の指定をするようになる。
-tooltip

    ストックのリストのを変更するが、ツールチップで表示する。
    リストのタイトルを表示する。
    引数2に他の指定をするようになる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockSaveBlue
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

ストック一覧 の青い方 の Save のボタンを押した場合と同じ。

ストックに今表示してある内容を、今選択中のリストにセーブする。

リスト名の入力欄に記入があったら、その文字がリスト中に表示されるようになる。
カラなら、初期値のtype[番号]になる。

引数に意味はない。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &stockSaveGreen
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

&stockSaveBlue と同じ。
ストック一覧 の緑の方 の Save のボタンを押した場合と同じ。

ストックに今表示してある内容を、今選択中のリストにセーブする。

リスト名の入力欄に記入があったら、その文字がリスト中に表示されるようになる。
カラなら、初期値のtype[番号]になる。

引数に意味はない。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &timerStop
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

&timer や &wait を使う事で実行されるタイマーを中止する。

タイマー一覧 のウインドウにある
停止 ボタンを押した時と同じ。

引数に中止させるタイマーの番号を指定する。
1 から 10 までの番号。

all を指定すると、全てのタイマーを中止にする。

-o または --output
これを指定した場合は、実行した事が
蓄え式説明表示 に出力される。
ウインドウは表示されず、文字が出力されるだけ。

引数は 2つ以内で指定する。

タイマーの番号 または all の指定と、
-o または --output の指定はどちらが先でも良い。

&timer  -d  [番号]
と同じ。

引数1 か 引数2

all

    全てのタイマーを停止。
数字

    中止させるタイマーの番号。
    1 から 10 までの番号。
-o
--output

    実行した内容を 蓄え式説明表示 に出力する。
    ウインドウは表示しない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &timerView
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

タイマー一覧 のＧｕｉを表示する。

アクティブにしない表示の仕方になる。

自動的に閉じる。
設定 の タイマー一覧の秒数 で指定した時間に閉じる。

&timer  -l
と同じ。

引数に意味は無い。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &tmpDelete
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

「一時的にのみ保存」の項目にチェックしてあるようなものを各種削除する。

引数に削除する項目を指定する。
trrEvery\user\temp

のフォルダの中身にあるファイルを削除し、設定を無効にする。

引数によっては、再起動が必要になるものもある。

&deleteItem  -tmp は

&tmpDelete  -item
&tmpDelete  -2gyo
の2つを実行した場合と同じ。

引数1

-gui

    TRR のウインドウの位置とサイズを保存するファイルをカラにする。

    メインのメニュー にある、
    ウインドウの位置とサイズを保存 によって作られるファイル。

    ただし、ウインドウの位置とサイズを元に戻すまではしない。
    ファイルをカラにするだけ。
-item

    一時的にのみ保存 の項目にチェックをして登録した アイテム を全て削除。
    使用を停止し、設定のファイルも削除する。
    ただし、 二行以上のアイテム は削除しない。
-2gyo

    一時的にのみ保存 の項目にチェックをして登録した 二行以上のアイテム を全て削除。
    使用を停止し、設定のファイルも削除する。
-hotkeyOnText

    一時的にのみ保存 の項目にチェックをして登録した テキスト上のキーを全て削除。
    設定のファイルを削除する。

    再起動が必要になる。
-hotkeyAllGround

    一時的にのみ保存 の項目にチェックをして登録した常時使用のキーを全て削除。
    設定のファイルを削除する。

    再起動が必要になる。
-all

    全ての項目を一度に削除する。

    再起動が必要になる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## &winCapture
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイプ6

-----------------------------------------------------

最前面にあるウインドウが、
どのファイルパスから実行されたソフトのウインドウかを調べて、
アイテム登録のウインドウに記入する。

つまり、そのソフトをアイテムとして登録できるように準備する。

TRR が、64ビット版か、32ビット版かで違いがある。

32ビット版の TRR では、
64ビット版のソフトのファイルパスを取得できない。

64ビット版の TRR なら、
32ビット版のソフトも含めて、どちらも取得できる。

テキスト から実行する場合は、テキストを閉じてから行う。

引数1にウインドウタイトルを指定すると、
そのウインドウタイトルのウインドウをアクティブにしてから最前面の情報を取得する。

ウインドウタイトルのウインドウが見つからないなら、最前面の情報を取得。

引数なし

    最前面にあるウインドウが、どのファイルパスから実行されたソフトのウインドウかを調べて、アイテム登録のウインドウに記入する。
引数1

    ウインドウタイトルを指定すると、
    そのウインドウタイトルのウインドウをアクティブにしてから最前面の情報を取得する。



