





＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_ahkErrorNotViewFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

TRR のスクリプトで Ahkコマンド を実行すると、 ErrorLevel の変数が変更される事がある場合は、エラーが出力されるようになっている。

もっとも、 Ahkコマンド によって、エラーが出力されるものと、しないものがありルールは曖昧である。

この変数の値を True に変えると、この ErrorLevel が変わった事によるエラーの表示をしないようにする。

この変数の値を True にしても False にしても、
ErrorLevel_TextRunRun の変数の値の変更にはなんら影響はない。

ErrorLevel_TextRunRun の説明は別のページを参考に。

普通の使い方 AutoHotkeyと違うところ
ErrorLevel_TextRunRun

False なら、エラーを表示する。

True なら、エラーを表示しない。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_ahkOpenSoftItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は テキスト上でファイルパスを指定して実行した場合、
ソフトを指定させて実行させる オプション変数。

拡張子が .ahk のファイルパスを実行した場合のみ影響する。

アイテム名 を代入して使用する。

ソフトのファイルパスを代入しても意味がないことに注意が必要。

まず、ソフトを アイテム に登録しなければ使えない。

その後、この変数に アイテム名 を代入すれば、
.ahk の拡張子のファイルパスをテキスト上に記入して実行した場合、
設定したソフトで起動するようになる。

動作確認は、 Alt+o で確認するとよい。

元に戻す場合は、変数にカラの文字を代入すればよい。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_anyKeyExeText1After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数に代入すると、 テキストで実行した際、
その代入した文字を 最後に追加した引数にして実行されるようになる。

例
[テキストの文字] + スペース + %O_anyKeyExeText1After%

O_anyKeyExeText1After の
Text1 の文字が示しているのは、 テキスト１ を示している。

つまり、この変数は テキスト１ でのみ動作に影響する。

似た種類のオプション変数に、
O_enterExeText1Before
O_enterExeText1After
がある。

O_enterExeText1Before は、
テキスト上のキーで動作する訳でない場合、
%O_enterExeText1Before% + スペース + [テキストの文字]

で実行していくようになる。

O_enterExeText1After は、
テキスト上のキーで動作する訳でない場合、
[テキストの文字] + スペース + %O_enterExeText1After%

で実行していくようになる。

そして、この変数である
O_anyKeyExeText1After は、
テキスト上のキーで動作する場合も含めて、
[テキストの文字] + スペース + %O_anyKeyExeText1After%

で実行していくようになる。

つまり、先の２つの変数と違い、
この変数は、 テキスト上のキーで動作する場合であろうと、そうでなかろうと影響を及ぼす変数である。

この O_anyKeyExeText1After の変数に設定し、
O_enterExeText1After の変数にも設定していた場合で、
テキスト上のキーで動作する訳でない場合は、
[テキストの文字] + スペース + %O_enterExeText1After%
+ スペース + %O_anyKeyExeText1After%

で実行していくようになる。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_anyKeyExeText2After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_anyKeyExeText1After の変数と同じ。

違いは Text1 の部分が Text2 になっているところである。

テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_anyKeyExeText3After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_anyKeyExeText1After の変数と同じ。

違いは Text1 の部分が Text3 になっているところである。

テキスト３ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_anyKeyExeTextSplit1After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_anyKeyExeText1After の変数と同じ。

違いは Text1 の部分が TextSplit1 になっているところである。

分割テキスト１ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_anyKeyExeTextSplit2After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_anyKeyExeText1After の変数と同じ。

違いは Text1 の部分が TextSplit2 になっているところである。

分割テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_betweenWordKey1_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 途中文字1 のタブにある項目を設定する変数。

　　　　で実行の、左の 　　　　 の部分を設定する。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

------------------------------------------
#### 初期値
カラの文字

同じ種類の変数で、

    O_betweenWordKey1_2
    O_betweenWordKey1_3
    O_betweenWordKey1_4
    O_betweenWordKey1_5
    O_betweenWordKey1_6
    O_betweenWordKey1_7
    O_betweenWordKey1_8
    O_betweenWordKey1_9
    O_betweenWordKey1_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_betweenWordScript1_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 途中文字1 のタブにある項目を設定する変数。

１つめ。実行する処理 の右の入力欄の部分を設定する。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

------------------------------------------
#### 初期値
カラの文字

同じ種類の変数で、

    O_betweenWordScript1_2
    O_betweenWordScript1_3
    O_betweenWordScript1_4
    O_betweenWordScript1_5
    O_betweenWordScript1_6
    O_betweenWordScript1_7
    O_betweenWordScript1_8
    O_betweenWordScript1_9
    O_betweenWordScript1_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_betweenWordTabAllFlag1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 途中文字1 のタブにある項目を設定する変数。

以下の文字があると、自動的に実行する のチェックボックスのオプション変数。

設定する値は
True か False 、 1 か 0 になる。

この変数が True なら、
この項目の下にある、 10種類の途中文字で実行する処理を使用できるようになる。

この変数が False なら、
途中文字の設定がしてあっても無効になる。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

------------------------------------------
#### 初期値
0 の数字。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_ClickWindowCloseFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

マウス操作のためのウインドウ の設定。

このウインドウは閉じる時、
閉じらないで最小化するという特殊な動作をするようにしてある。

この変数を True に設定すると、
普通に閉じるようになる。

設定する値は
True か False 、 1 か 0 になる。

------------------------------------------
#### 初期値
0 の数字。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText1After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数に代入すると、 テキストで実行した際、
その代入した文字を 最後に追加した引数にして実行されるようになる。

例
[テキストの文字] + スペース + %O_enterExeText1After%

O_enterText1After の
Text1 の文字が示しているのは、 テキスト１ を示している。

つまり、この変数は テキスト１ でのみ動作に影響する。

なお、 テキスト上のキーを使用して実行した場合は影響を与えない。

テキスト上のキーを使用して実行した場合でも影響を与えるには、
O_anyKeyExeText1After の方を設定する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText1Before
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数に代入すると、 テキストで実行した際、
その代入した文字を 先頭にして実行されるようになる。

例
%O_enterExeText1Before% + スペース + [テキストの文字]

O_enterText1Before の
Text1 の文字が示しているのは、 テキスト１ を示している。

つまり、この変数は テキスト１ でのみ動作に影響する。

なお、 テキスト上のキーを使用して実行した場合は影響を与えない。

ちなみに、 O_anyKeyExeText1Before の変数は存在しない。
これを用意しても、入力補完でさえも使えなくなるだけなので使い道がないと思われるからである。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText2After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1After の変数と同じ。

違いは Text1 の部分が Text2 になっているところである。

テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText2Before
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1Before の変数と同じ。

違いは Text1 の部分が Text2 になっているところである。

テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText3After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1After の変数と同じ。

違いは Text1 の部分が Text3 になっているところである。

テキスト３ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeText3Before
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1Before の変数と同じ。

違いは Text1 の部分が Text3 になっているところである。

テキスト３ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeTextSplit1After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1After の変数と同じ。

違いは Text1 の部分が TextSplit1 になっているところである。

分割テキスト１ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeTextSplit1Before
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1Before の変数と同じ。

違いは Text1 の部分が TextSplit1 になっているところである。

分割テキスト１ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeTextSplit2After
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1After の変数と同じ。

違いは Text1 の部分が TextSplit2 になっているところである。

分割テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_enterExeTextSplit2Before
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

O_enterExeText1Before の変数と同じ。

違いは Text1 の部分が TextSplit2 になっているところである。

分割テキスト２ で動作する。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_folderOpenSoftItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は テキスト上でフォルダのパスを指定して実行した場合、
ソフトを指定させて実行させる オプション変数。

アイテム名 を代入して使用する。

ソフトのファイルパスを代入しても意味がないことに注意が必要。

まず、ソフトを アイテム に登録しなければ使えない。

その後、この変数に アイテム名 を代入すれば、
フォルダのパスをテキスト上に記入して実行した場合、
設定したソフトで起動するようになる。

種類がフォルダのアイテムを実行する時も、 この変数で指定したアイテム名のソフトを使って実行する。

動作確認は、 Alt+o で確認するとよい。

元に戻す場合は、変数にカラの文字を代入すればよい。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_inputListAutoNotFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、 設定 の項目にある、
自動で入力補完を表示しない のチェックボックスの設定と同じもの。

False なら、入力補完を自動で表示する。

True 入力補完を自動で表示しない。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_inputListReverseX
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

入力補完の位置を調整したい時に設定する変数。

O_inputListX の変数と役割が近い変数。

一行テキスト の入力補完は、入力欄の位置からこれらの変数の値の位置に表示するようになっている。

尚、 分割テキストにある入力補完には影響がない。

入力補完が表示する時、
O_inputListX の値の分、右にずれた位置に表示する。

さて、スクリーンの右端あたりにテキストがある場合、
右にずれた位置でなく、左にずれた位置に表示する。

その時は、 O_inputListX の値ではなく、
この O_inputListReverseX の値の分、左にずれた位置に表示する。

この O_inputListReverseX の変数は、左にずれる位置を調整するオプション変数である。

初期化は
SetO_inputListReverseX( )
か
O_inputListReverseX = 260
で可能。

------------------------------------------
#### 初期値
260
O_inputListReverseY

入力補完の位置を調整したい時に設定する変数。

O_inputListY の変数と役割が近い変数。

一行テキスト の入力補完は、入力欄の位置からこれらの変数の値の位置に表示するようになっている。

尚、 分割テキストにある入力補完には影響がない。

入力補完が表示する時、
O_inputListY の値の分、下にずれた位置に表示する。

さて、スクリーンの下あたりにテキストがある場合、
下にずれた位置でなく、上にずれた位置に表示する。

その時は、 O_inputListY の値ではなく、
この O_inputListReverseY の値の分、上にずれた位置に表示する。

この O_inputListReverseY の変数は、上にずれる位置を調整するオプション変数。

初期化は
SetO_inputListReverseY( )
か
O_inputListReverseY = 395
で可能。

------------------------------------------
#### 初期値
395

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_inputListX
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

入力補完の位置を調整したい時に設定する変数。

一行テキスト の入力補完は、入力欄の位置からこれらの変数の値の位置に表示するようになっている。

尚、 分割テキストにある入力補完には影響がない。

入力補完が表示する時、
O_inputListX の値の分、右にずれた位置に表示する。

この O_inputListX の変数は、左にずれる位置を調整するオプション変数。

初期化は
SetO_inputListX( )
か
O_inputListX = 0
で可能。

------------------------------------------
#### 初期値
0
O_inputListY

入力補完の位置を調整したい時に設定する変数。

一行テキスト の入力補完は、入力欄の位置からこれらの変数の値の位置に表示するようになっている。

尚、 分割テキストにある入力補完には影響がない。

入力補完が表示する時、
O_inputListY の値の分、下にずれた位置に表示する。

この O_inputListY の変数は、上にずれる位置を調整するオプション変数。

初期化は
SetO_inputListY( )
か
O_inputListY = 33
で可能。

------------------------------------------
#### 初期値
33

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_lastWordKey2_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 項目2 のタブにある、
最後の文字で自動的に実行 の処理の項目を設定する変数。

　　　　で実行。の、左の 　　　　 の部分を設定する。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

右側にある、 「実行処理。」 と同時に設定することで動作するようになる。

テキストの文字の最後が、ここで設定した文字なら 「実行処理。」 の内容が実行する。

「実行処理。」 の方のオプション変数は
O_lastWordScript2_1 である。

O_lastWordKey2_1 が１つめ。
O_lastWordKey2_2 が２つめの部分を意味している。

O_lastWordKey3_1 が 項目3 のタブに関する変数で、

O_lastWordKey4_1 が 項目4 のタブに関する変数である。

項目1 に関しては、 項目2 から 項目5 と違い、
実行のキーになる文字は設定できても、実行処理はあらかじめ決められた内容のみになり、
仕様が少し違うので、これを操作するオプション設定を用意していない。

よって、 O_lastWordKey1_1 は存在しない。

------------------------------------------
#### 初期値
カラの文字

同じ種類の変数で、

    O_lastWordKey2_2
    O_lastWordKey2_3
    O_lastWordKey2_4
    O_lastWordKey2_5
    O_lastWordKey2_6
    O_lastWordKey2_7
    O_lastWordKey2_8
    O_lastWordKey2_9
    O_lastWordKey2_10

    O_lastWordKey3_1
    O_lastWordKey3_2
    O_lastWordKey3_3
    O_lastWordKey3_4
    O_lastWordKey3_5
    O_lastWordKey3_6
    O_lastWordKey3_7
    O_lastWordKey3_8
    O_lastWordKey3_9
    O_lastWordKey3_10

    O_lastWordKey4_1
    O_lastWordKey4_2
    O_lastWordKey4_3
    O_lastWordKey4_4
    O_lastWordKey4_5
    O_lastWordKey4_6
    O_lastWordKey4_7
    O_lastWordKey4_8
    O_lastWordKey4_9
    O_lastWordKey4_10

    O_lastWordKey5_1
    O_lastWordKey5_2
    O_lastWordKey5_3
    O_lastWordKey5_4
    O_lastWordKey5_5
    O_lastWordKey5_6
    O_lastWordKey5_7
    O_lastWordKey5_8
    O_lastWordKey5_9
    O_lastWordKey5_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_lastWordScript2_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 項目2 のタブにある、
最後の文字で自動的に実行 の処理の項目を設定する変数。

１つめ。実行する処理 の右の入力欄の部分を設定する。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

左側にある、 　　　　 で実行 の項目と同時に設定することで動作するようになる。

　　　　 で実行 の方のオプション変数は
O_lastWordKey2_1 である。

O_lastWordScript2_1 が１つめ。
O_lastWordScript2_2 が２つめの部分を意味している。

O_lastWordScript3_1 が 項目3 のタブに関する変数で、

O_lastWordScript4_1 が 項目4 のタブに関する変数である。

項目1 に関しては、 項目2 から 項目5 と違い、
実行のキーになる文字は設定できても、実行処理はあらかじめ決められた内容のみになり、
仕様が少し違うので、これを操作するオプション設定を用意していない。

よって、 O_lastWordScript1_1 は存在しない。

------------------------------------------
#### 初期値
カラの文字

同じ種類の変数で、

    O_lastWordScript2_2
    O_lastWordScript2_3
    O_lastWordScript2_4
    O_lastWordScript2_5
    O_lastWordScript2_6
    O_lastWordScript2_7
    O_lastWordScript2_8
    O_lastWordScript2_9
    O_lastWordScript2_10

    O_lastWordScript3_1
    O_lastWordScript3_2
    O_lastWordScript3_3
    O_lastWordScript3_4
    O_lastWordScript3_5
    O_lastWordScript3_6
    O_lastWordScript3_7
    O_lastWordScript3_8
    O_lastWordScript3_9
    O_lastWordScript3_10

    O_lastWordScript4_1
    O_lastWordScript4_2
    O_lastWordScript4_3
    O_lastWordScript4_4
    O_lastWordScript4_5
    O_lastWordScript4_6
    O_lastWordScript4_7
    O_lastWordScript4_8
    O_lastWordScript4_9
    O_lastWordScript4_10

    O_lastWordScript5_1
    O_lastWordScript5_2
    O_lastWordScript5_3
    O_lastWordScript5_4
    O_lastWordScript5_5
    O_lastWordScript5_6
    O_lastWordScript5_7
    O_lastWordScript5_8
    O_lastWordScript5_9
    O_lastWordScript5_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_lastWordTabAllFlag2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行の設定 の 項目2 のタブにある、
最後の文字で自動的に実行する のチェックボックスのオプション変数。

テキストの文字で自動的に実行の設定 に関する内容は別のページで説明する。

細かい説明 テキストの文字で自動的に実行

設定する値は
True か False 、 1 か 0 になる。

この変数が False なら、
項目2 のタブ内の「最後の文字で自動的に実行する処理」が全て無効になる。

影響があるのは、 項目2 のタブ内に関するもののみである。

O_lastWordTabAllFlag3 が 項目3 のタブに関する変数、

O_lastWordTabAllFlag4 が 項目4 のタブに関する変数。

項目1 に関しては、 項目2 から 項目5 と違い、
実行のキーになる文字は設定できても、実行処理はあらかじめ決められた内容のみになり、
仕様が少し違うので、これを操作するオプション設定を用意していない。

よって、 O_lastWordTabAllFlag1 は存在しない。

------------------------------------------
#### 初期値
0

同じ種類の変数で、

    O_lastWordTabAllFlag3
    O_lastWordTabAllFlag4
    O_lastWordTabAllFlag5

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_minimizeTextFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 設定3 のタブにある
テキストを閉じるのではなく、最小化させるようにする の設定の変数。

設定する値は
True か False 、 1 か 0 になる。

この変数が True なら、
テキスト のウインドウを閉じる動作のうちのいくつかで、閉じるのではなく最小化をします。
ウインドウを閉じる動作のうちのいくつか、の例

ウインドウタイトルのウインドウを閉じるボタンをクリック。

Alt +F4 のキーで閉じる。

Esc のキーで閉じる。

設定 の 設定3 のタブにある、
実行したあと、テキスト欄を閉じる の設定通りの動作で閉じる場合。
つまり、 アイテム や Ahkコマンドの実行で閉じる場合。

これらの場合、この O_minimizeTextFlag が True なら、
閉じるのではなく最小化をする。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_spaceFileNotFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 の 空白のあるファイルパスを自動的に調べて対応する、という処理をしない。 の設定の変数。

設定する値は
True か False 、 1 か 0 になる。

TRR では、

    ファイルパスから実行
    アイテムの実行時
    規定のコマンドの実行時

などに、半角スペースのあるファイルパスがある場合、そのパスを1つの括りとして扱うように処理させて動作するようにしている箇所があります。

この変数が True なら、「半角スペースがあるファイルパスを調べて対応する」という処理をしなくなる。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_spacePlusFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 設定3 のタブにある、
入力補完の決定後に、スペースを足す の設定の変数。

設定する値は
True か False 、 1 か 0 になる。

この変数が True なら、
入力補完を選択して決定した時、選択した文字に半角スペースが追加されて テキスト にその文字が追加されるようになる。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_stockTextLengthNotFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ストック一覧 のウインドウは、マウスでウインドウの横幅を広げると、入力欄の幅も広げるようにしている。

この変数が True なら、
入力欄の幅を変更しないようになる。

設定する値は
True か False 、 1 か 0 になる。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_suspendNotViewFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

バージョン 2.00.02 から

------------------------------------------

バージョン 2.00.02 から

E_SuspendToggle を使った場合、ツールチップを使ってオンとオフを簡易的に表示する様にした。

この O_suspendNotViewFlag を True にすると、そのツールチップを表示しない様にする。

設定する値は
True か False 、 1 か 0 になる。
初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_textHistory
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 の 設定1 のタブにある、
コマンドの履歴の数 の設定用の変数。

数字を指定する。

履歴を保存する最大の数を指定する。

履歴とは、 テキスト 使って実行した内容を保存したものの事。

100 以上は設定できない。
設定すると、エラーが表示して、初期値が設定される。

0 を指定すると、履歴の保存自体が行われなくなる。
初期値
20

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_textHistoryNotFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 の 設定1 のタブにある、
コマンドの履歴の数 の設定に関する変数。

設定 の項目には、この変数にと同じものは用意していない。

コマンドの履歴を保存するかしないかの設定。

設定する値は
True か False 、 1 か 0 になる。

True にすると、コマンドの履歴を保存しないようにする。

設定 の コマンドの履歴の数 をいくつにしようと、
この変数が True なら、コマンドの履歴を保存しない。
補足

設定 の コマンドの履歴の数 を 0 の数字にした場合も、同じくコマンドの履歴を保存しないようにできる。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_tmpOutputMultipleTextFlag
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

設定 設定2 のタブにある、
二行以上のスクリプトの時も「一時的な説明表示」に結果を出力する の設定用の変数。

設定する値は
True か False 、 1 か 0 になる。

一時的な説明表示 に結果を出力するような内容は、 二行以上のテキスト で実行した場合や、 二行以上のアイテム を実行した場合、 一時的な説明表示 のウインドウを表示しません。

結果の文字を出力するかどうかは、この設定によって決まります。

この変数が
False なら、 結果を出力しない。

この変数が
True なら、 結果を出力する。
二行以上のアイテムなどを実行した時の事である。

もっとも、この変数が False の時でも、
規定のコマンドに、 -h の引数を指定して、説明を出力させる場合は、この設定の影響を受けない。

後、 &pwd の結果表示など、
この設定の影響を受けない規定のコマンドがある。

------------------------------------------
#### 初期値
0

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_toolTipSecond
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

TRR 上でツールチップが表示する場合の表示する秒数を指定する。

数字を指定する。
ツールチップが表示する秒数を指定する。

&collabText を使った場合や、
ストック一覧の Save ボタンを押した場合や
F_toolTipOutput( str ) を使用した場合にツールチップが表示する。

------------------------------------------
#### 初期値
3

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_toolTipX
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

TRR 上でツールチップが表示する場合の表示する位置を指定する。

数字を指定する。

スクリーンの左端から右の位置の指定。
数字が大きくなるほど、右の位置に表示する。

------------------------------------------
#### 初期値
100

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_toolTipY
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

TRR 上でツールチップが表示する場合の表示する位置を指定する。

数字を指定する。

スクリーンの上端から下の位置の指定。
数字が大きくなるほど、下の位置に表示する。

------------------------------------------
#### 初期値
600

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_txtOpenSoftItem
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は テキスト上でファイルパスを指定して実行した場合、
ソフトを指定させて実行させる オプション変数。

拡張子が .txt のファイルパスを実行した場合のみ影響する。

アイテム名 を代入して使用する。

ソフトのファイルパスを代入しても意味がないことに注意が必要。

まず、ソフトを アイテム に登録しなければ使えない。

その後、この変数に アイテム名 を代入すれば、
.txt の拡張子のファイルパスをテキスト上に記入して実行した場合、
設定したソフトで起動するようになる。

動作確認は、 Alt+o で確認するとよい。

元に戻す場合は、変数にカラの文字を代入すればよい。

------------------------------------------
#### 初期値
カラの文字

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthBasisText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの入力欄の横幅の基準値を変更する変数。

テキストの入力欄は一定の文字数になると横幅が変更する仕様になっているが、
それの最小の時の横幅の大きさを設定できる。

O_widthWindowBasisText1 の変数は
テキストのウインドウの最小の時の横幅を設定する変数である。

これと、同時に設定しないといけない事に注意がいる。

O_widthBasisText1 の
Text1 の文字が示しているのは、 テキスト１ を示している。

つまり、この変数は テキスト１ でのみ動作に影響する。

userフォルダに加えない設定 の 設定2 のタブに、
入力欄の規定の長さ の項目がある。

これは、
O_widthBasisText1
O_widthBasisText2
O_widthBasisText3
に一括で指定するものである。

ただし、
O_widthBasisTextSplit1
O_widthBasisTextSplit2
には指定しない。

------------------------------------------
#### 初期値
150

同じ種類の変数で、

    O_widthBasisText2
    O_widthBasisText3
    O_widthBasisTextSplit1
    O_widthBasisTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthBasisTextSplit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキストの入力欄の横幅の基準値を変更する変数。

説明する内容は
O_widthBasisText1
で説明している事と同じになる。

この変数を設定する場合は
O_widthBasisWorkDirTextSplit1
O_widthWindowBasisTextSplit1
も設定する事になると思われる。

------------------------------------------
#### 初期値
250

同じ種類の変数で、
O_widthBasisTextSplit2
がある。
O_widthBasisWorkDirTextSplit1

分割テキストの入力欄の
作業フォルダのみ の入力欄の横幅の基準値を変更する変数。

説明する内容は
O_widthBasisText1
で説明している事と同じになる。

O_widthBasisWorkDirTextSplit1 の
TextSplit1 の文字が示しているのは、 分割テキスト１ を示している。

O_widthBasisTextSplit1 で、
分割テキスト１ の入力欄の最小の時の横幅を設定できるが、
作業フォルダのみ の入力欄は他とは横幅が違うため、別に設定しなければいけない事になる。

この変数を設定する場合は
O_widthBasisTextSplit1
O_widthWindowBasisTextSplit1
も設定する事になると思われる。

------------------------------------------
#### 初期値
165

同じ種類の変数で、
O_widthBasisWorkDirTextSplit2
がある。
O_widthMaxLowerText1

テキストの入力欄の横幅の最大幅を変更する変数。

テキストの入力欄は一定の文字数になると横幅が変更する仕様になっている。

そして、スクリーンの右端に近づくと、それ以上横幅が増えないようにしている。

初期値では、右端から 130px の位置になるとそこで横幅が増えないようにしている。

この変数は、その右端から
??px の位置になるとそこで横幅が増えないようにする、 ?? の部分を指定する変数。

数字が小さいほど、最大幅が大きくなり、
数字が大きいほど、最大幅が小さくなることになる。

------------------------------------------
#### 初期値
130

同じ種類の変数で、

    O_widthMaxLowerText2
    O_widthMaxLowerText3
    O_widthMaxLowerTextSplit1
    O_widthMaxLowerTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthNotFlagText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの入力欄の横幅を、文字数によって変更するかどうかを決める変数。

設定する値は
True か False 、 1 か 0 になる。

テキスト の入力欄は一定の文字数になると横幅が変更する仕様になっている。

この変数が True なら、
テキスト の入力欄の横幅を文字数によって変更する動作を無しにする。

userフォルダに加えない設定 の 設定2 のタブに、
テキストの入力欄の長さを自動的に変えない のチェックボックスの項目がある。

これは、
O_widthNotFlagText1
O_widthNotFlagText2
O_widthNotFlagText3
O_widthNotFlagTextSplit1
O_widthNotFlagTextSplit2
に一括で指定するものである。

------------------------------------------
#### 初期値
0

同じ種類の変数で、

    O_widthNotFlagText2
    O_widthNotFlagText3
    O_widthNotFlagTextSplit1
    O_widthNotFlagTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthOneCharText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの入力欄は一定の文字数になると横幅が変更する仕様になっている。

その時の、一文字ごとに増える横幅の大きさをこの変数で設定できる。

初期値は 10 なので、
一文字ごとに、 10px ずつ横幅が大きくなる。

------------------------------------------
#### 初期値
10

同じ種類の変数で、

    O_widthOneCharText2
    O_widthOneCharText3
    O_widthOneCharTextSplit1
    O_widthOneCharTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthStartCharCountText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの入力欄は一定の文字数になると横幅が変更する仕様になっている。

その横幅が変更する基準になる「一定の文字数」をこの変数で設定できる。

初期値は 15 である。

この初期値の状態だと、 16 文字以降になると、 テキスト の横幅が大きくなる。

------------------------------------------
#### 初期値
15

同じ種類の変数で、

    O_widthStartCharCountText2
    O_widthStartCharCountText3
    O_widthStartCharCountTextSplit1
    O_widthStartCharCountTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthWindowBasisText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストのウインドウの横幅の基準値を変更する変数。

テキストウインドウは一定の文字数になると横幅が変更する仕様になっているが、
それの最小の時の横幅の大きさを設定できる。

O_widthBasisText1 の変数は
テキストの入力欄の最小の時の横幅を設定する変数である。

これと、同時に設定しないといけない事に注意がいる。

O_widthWindowBasisText1 の
Text1 の文字が示しているのは、 テキスト１ を示している。

つまり、この変数は テキスト１ でのみ動作に影響する。

userフォルダに加えない設定 の 設定2 のタブに、
ウインドウの規定の幅 の項目がある。

これは、
O_widthWindowBasisText1
O_widthWindowBasisText2
O_widthWindowBasisText3
に一括で指定するものである。

ただし、
O_widthWindowBasisTextSplit1
O_widthWindowBasisTextSplit2
には指定しない。

------------------------------------------
#### 初期値
212

同じ種類の変数で、

    O_widthWindowBasisText2
    O_widthWindowBasisText3
    O_widthWindowBasisTextSplit1
    O_widthWindowBasisTextSplit2

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## O_widthWindowBasisTextSplit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキストのウインドウの横幅の基準値を変更する変数。

説明する内容は
O_widthWindowBasisText1
で説明している事と同じになる。

この変数を設定する場合は
O_widthBasisTextSplit1
O_widthBasisWorkDirTextSplit1
も設定する事になると思われる。

------------------------------------------
#### 初期値
274

同じ種類の変数で、
O_widthWindowBasisTextSplit2
がある。


