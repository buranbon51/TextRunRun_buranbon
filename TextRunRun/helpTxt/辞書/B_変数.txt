


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_betweenWordKeyStart1_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、起動時に テキストの文字で自動的に実行 の設定を保存するために用意した変数。

途中文字1 のタブ内の
で実行。1つめ。 キーになるの文字 の入力欄の起動時の時点での値を保存している。

この変数の値は、 E_lastWordRestoreFirst のサブルーチンの動作に影響を与える。

B_ の変数は、代入して使用していく変数ではない。  
O_ の変数と混同しないように。

同じ種類の変数で、

    B_betweenWordKeyStart1_2
    B_betweenWordKeyStart1_3
    B_betweenWordKeyStart1_4
    B_betweenWordKeyStart1_5
    B_betweenWordKeyStart1_6
    B_betweenWordKeyStart1_7
    B_betweenWordKeyStart1_9
    B_betweenWordKeyStart1_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_betweenWordScriptStart1_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、起動時に テキストの文字で自動的に実行 の設定を保存するために用意した変数。

途中文字1 のタブ内の
1つめ。実行する処理 の入力欄の起動時の時点での値を保存している。

この変数の値は、 E_lastWordRestoreFirst のサブルーチンの動作に影響を与える。

B_ の変数は、代入して使用していく変数ではない。  
O_ の変数と混同しないように。

同じ種類の変数で、

    B_betweenWordScriptStart1_2
    B_betweenWordScriptStart1_3
    B_betweenWordScriptStart1_4
    B_betweenWordScriptStart1_5
    B_betweenWordScriptStart1_6
    B_betweenWordScriptStart1_7
    B_betweenWordScriptStart1_9
    B_betweenWordScriptStart1_10

などがある。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_betweenWordTabAllStartFlag1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキストの文字で自動的に実行 の設定の、
途中文字1 のタブ内にある、
以下の文字があると、自動的に実行する。 途中文字1の分のみ のチェックボックスの設定を保存するために用意した変数。

起動時の時点での値を保存している。

この変数の値は、 E_lastWordRestoreFirst のサブルーチンの動作に影響を与える。

B_ の変数は、代入して使用していく変数ではない。  
O_ の変数と混同しないように。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conLastWord_Tab
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

最後の文字で自動的に実行の設定 のウインドウの
タブのコントロールの変数名 を値に持つ変数。
GuiControl, %B_GuiNumLastWord%:Choose , %B_conLastWord_Tab%, 2

などの使い方をする際に使用する。

最後の文字で自動的に実行の設定 のウインドウのタブを 項目2 のタブに変える。

F_lastWordTabChange( 2 ) でも、同じ操作ができる。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conMultipleText1_Edit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のテキスト の入力欄のコントロールの変数名を格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText1_Edit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト１ の入力欄のコントロールの変数名を値に持つ。

	GuiControl,  %B_GuiNumText1%:Move  ,  %B_conText1_Edit1%,  x170

や
	F_GuiControl( B_GuiNumText1,  B_conText1_Edit1,  "Move",  "x50" )

などの使い方で使用する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText1_Picture1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト１ のアイコンのコントロールの変数名を値に持つ。
	GuiControl,  %B_GuiNumText1%:Hide  ,  %B_conText1_Picture1%

や
	F_GuiControl( B_GuiNumText1,  B_conText1_Picture1,  "Show" )

などの使い方で使用する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText2_Edit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト２ の入力欄のコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText2_Picture1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト２ のアイコンのコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText3_Edit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト３ の入力欄のコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conText3_Picture1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト３ のアイコンのコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conTextSplit1_Picture1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト１ のアイコンのコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_conTextSplit2_Picture1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト２ のアイコンのコントロールの変数名を値に持つ。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_DriveName
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

TRR を起動した、ドライブのパスを格納する変数。

C:\など。

USBメモリなどから TRR を起動した場合は、そのドライブのパスになる。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_ErrorFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

通常は  
%A_ScriptDir%\trrEvery\user\errorOutput.txt

のファイルパスを値に持つ変数。

userフォルダに加えない設定にある
userフォルダを変更する設定をした場合、

この値も変更する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_EveryFolder
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

%A_ScriptDir%\trrEvery

のフォルダパスを値に持つ変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumClickWindow
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

マウス操作のためのウインドウ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumErrorOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

エラー表示 のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumInputList
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

入力補完 のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumLastWord
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

最後の文字で実行する設定 のウインドウのGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumMultipleText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のテキスト のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

蓄え式説明表示 のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumReadFileOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ファイル表示用 のウインドウのGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumStock1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ストック一覧 の青い方のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumStock2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ストック一覧 の緑の方のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト１ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumText2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト２ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumText3
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト３ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumTextSplit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト１ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumTextSplit2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト２ のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumTimer
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイマー一覧 のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_GuiNumTmpOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

一時的な説明表示 のGuiのナンバーを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_itemArg0
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のアイテム のスクリプト内で使用する時のみ意味を成す変数。

値に「引数の数」を持つ。

引数の区切りは半角スペースによって区切られる。

「引数を , で区切る」ルールに対応している。

つまり、引数１が , なら、
引数の区切りは , によって区切られる。

このルールは別のページで説明する。

細かい説明 引数を,で区切るルール

注意点がある。

現在の仕様では、
B_itemArg1 から B_itemArg9 までが使用可能であるが、
B_itemArg0 の値は、 9 を超えても
半角スペースまたは , で区切った引数の数を表示するようになっている。

つまり、 10 を超えてもその数を表示する訳であり、 B_itemArg9 までしか使えない事は考慮しない様になっている。

B_itemArg0 を使用したスクリプトを使う場合、 B_itemArg9 までしか使えない事を考慮した 10 を超える値の場合に備えたスクリプトに ユーザーが対応するようにしないといけない。

といっても、 TRR では、 Loop を使えないので、使用することは無いと思うが。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_itemArg1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のアイテム のスクリプト内で使用する時のみ意味を成す変数。

値に「引数１の文字」を持つ。

引数の区切りは半角スペースによって区切られる。

「引数を , で区切る」ルールに対応している。

つまり、引数１が , なら、
引数の区切りは , によって区切られる。

このルールは別のページで説明している。

細かい説明 引数を,で区切るルール

B_itemArg1 から B_itemArg9 までが使用可能である。

B_itemArg10 以降は存在しない。

いくつか注意点がある。

    別のスレッドが割り込む可能性がある変数である事。
    %--を用いないと引数が最後にも追加されてしまう事。
    関数の引数と違い、変数名で指定するわけではないので、文字列で指定する事になる事。

注意点は B_itemArgAll の方で挙げたので細かい説明はそちらを参考にしてほしい。
B_itemArgAllに移動

B_itemArg2
から
B_itemArg9

これらの変数は、 B_itemArg1 の意味が分かっているなら、説明の必要がないので省略する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_itemArgAll
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のアイテム のスクリプト内で使用する時のみ意味を成す変数。

値に「全ての引数」を持つ。

つまり、 アイテム名 の右側の文字全て。両端の半角スペースは無し。

普通、 二行以上のアイテム の引数は
「アイテムのスクリプトの文字」に続くスクリプト、または文字列として扱われる。

testItem という名で 二行以上のアイテム を作ったとする。
そして
testItem   %A_MyDocuments%

を実行するとする。

例１

testItemのスクリプトが
&cd

なら
&cd  %A_MyDocuments%

が実行される。

例２

testItemのスクリプトが
&cd[改行]
                                    

なら
&cd
%A_MyDocuments%

が実行される。

つまり、こちらの例では
最後に改行がある場合では
実行時の引数は &cd の引数として扱われない。

&cd を実行した後に、 実行時の引数の処理を実行するという事になる。

さて、今回の B_itemArgAll を使用した場合だが、
その場合でも、そのルールは変わらない。

つまり

例３

testItemのスクリプトが
&cd  %B_itemArgAll%

なら
&cd  %A_MyDocuments%  %A_MyDocuments%

が実行されてしまう。

B_itemArgAll を使用しても、引数は、スクリプトの後に続く文字扱いになるので、 引数が二重に指定される事になってしまう。

その対応が必要ということである。
よって

例４

testItemのスクリプトが
&cd  %B_itemArgAll%  %--

または
&cd  %B_itemArgAll%
%--

なら
&cd  %A_MyDocuments%

がちゃんと実行される。

以上の例の様に B_itemArgAll などを使う場合は、 %-- を用いて、引数が後に続く文字として扱われないようにする必要がある。

%-- の仕様は別のページで説明する。

普通の使い方 引数がいらない場合

もう説明してある通り、当然だが
%-- がスクリプトの最後に記入されている場合でも、
B_itemArgAll の変数は変わらずに引数を値に持つことができる。

注意点があるのでを挙げておく。
別のスレッドが割り込むと変更される
可能性がある

B_item と名のつく変数は、別のスレッドが割り込むと変更される可能性がある変数なので、
Sleep や MsgBox などを使用してあるスクリプトの場合、スクリプトの先頭の方で「代えの変数」に代入しておく事を薦める。

例
myGlobalVar  =  %B_itemArgAll%
[本来のスクリプト]

関数の引数ではないため、
変数名を指定する訳ではない

アイテム の引数を指定する際の事である。

関数の引数ではないため、変数名をそのまま指定するわけではない。

変数名をそのまま指定しても、その変数名がただの文字列としてしか扱われない。

よって、変数を使う場合は、
testItem  A_MyDocuments

ではなく、
testItem  %A_MyDocuments%

という指定になる。

Ahkコマンド の引数の指定に近い形になる。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_itemNameOwn
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のアイテム のスクリプト内で使用する時のみ意味を成す変数。

値に「アイテム名」を持つ。

スクリプト内で、 アイテム名 を表したい場合に有用である。

使用例
	F_errorOutput(  B_itemNameOwn  .  "  のアイテムでエラーがある" )

現在の仕様では、 アイテム をネストして使用したとしても、 そのスクリプトの アイテム名 を正しく表すことができるが、
Sleep や MsgBox などを使用し、その時に別のスレッド Ahkは擬似スレッドになるらしいが が割り込む事があった場合、
B_itemNameOwn の値も別のに上書きされるので、そこは注意が必要である。

これは B_item と名のつく変数全般に同じ注意が必要である。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_lastWordKeyStart2_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、起動時に
テキストの文字で自動的に実行の設定 の内容を保存するために用意した変数。

項目2 の
で実行。１つめ。 のキーの文字の入力欄 左側の入力欄 の起動時の時点での値を保持している。

E_lastWordRestoreFirst のサブルーチンを使用した際は、この変数を利用する事になっている。

E_lastWordRestoreFirst の説明はこちらのページで。

この変数が起動時に値を保持するのは、
テキストの文字で自動的に実行の設定 の設定のファイルを読み込んだ時になる。

ユーザーが作った 起動時に実行するアイテム 内で内容を設定していたとしてもそれらの値は保持したりはしない。

数多く同じ用途の変数がある。

    B_lastWordKeyStart2_2
    B_lastWordKeyStart2_3
    B_lastWordKeyStart2_4
    B_lastWordKeyStart2_5
    B_lastWordKeyStart2_6
    B_lastWordKeyStart2_7
    B_lastWordKeyStart2_8
    B_lastWordKeyStart2_9
    B_lastWordKeyStart2_10

    B_lastWordKeyStart3_1
    B_lastWordKeyStart3_2
    B_lastWordKeyStart3_3
    B_lastWordKeyStart3_4
    B_lastWordKeyStart3_5
    B_lastWordKeyStart3_6
    B_lastWordKeyStart3_7
    B_lastWordKeyStart3_8
    B_lastWordKeyStart3_9
    B_lastWordKeyStart3_10

    B_lastWordKeyStart4_1
    B_lastWordKeyStart4_2
    B_lastWordKeyStart4_3
    B_lastWordKeyStart4_4
    B_lastWordKeyStart4_5
    B_lastWordKeyStart4_6
    B_lastWordKeyStart4_7
    B_lastWordKeyStart4_8
    B_lastWordKeyStart4_9
    B_lastWordKeyStart4_10

    B_lastWordKeyStart5_1
    B_lastWordKeyStart5_2
    B_lastWordKeyStart5_3
    B_lastWordKeyStart5_4
    B_lastWordKeyStart5_5
    B_lastWordKeyStart5_6
    B_lastWordKeyStart5_7
    B_lastWordKeyStart5_8
    B_lastWordKeyStart5_9
    B_lastWordKeyStart5_10

これらは、用途が同じものである。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_lastWordScriptStart2_1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、起動時に
テキストの文字で自動的に実行の設定 の内容を保存するために用意した変数。

項目2 の
１つめ。実行する処理 の入力欄 右側の入力欄 の起動時の時点での値を保持している。

E_lastWordRestoreFirst のサブルーチンを使用した際は、この変数を利用する事になっている。

E_lastWordRestoreFirst の説明はこちらのページで。

この変数が起動時に値を保持するのは、
テキストの文字で自動的に実行の設定 の設定のファイルを読み込んだ時になる。

ユーザーが作った 起動時に実行するアイテム 内で内容を設定していたとしてもそれらの値は保持したりはしない。

数多く同じ用途の変数がある。

    B_lastWordScriptStart2_1
    B_lastWordScriptStart2_1
    B_lastWordScriptStart2_1
    B_lastWordScriptStart2_5
    B_lastWordScriptStart2_6
    B_lastWordScriptStart2_7
    B_lastWordScriptStart2_8
    B_lastWordScriptStart2_9
    B_lastWordScriptStart2_10

    B_lastWordScriptStart3_1
    B_lastWordScriptStart3_2
    B_lastWordScriptStart3_3
    B_lastWordScriptStart3_4
    B_lastWordScriptStart3_5
    B_lastWordScriptStart3_6
    B_lastWordScriptStart3_7
    B_lastWordScriptStart3_8
    B_lastWordScriptStart3_9
    B_lastWordScriptStart3_10

    B_lastWordScriptStart4_1
    B_lastWordScriptStart4_2
    B_lastWordScriptStart4_3
    B_lastWordScriptStart4_4
    B_lastWordScriptStart4_5
    B_lastWordScriptStart4_6
    B_lastWordScriptStart4_7
    B_lastWordScriptStart4_8
    B_lastWordScriptStart4_9
    B_lastWordScriptStart4_10

    B_lastWordScriptStart5_1
    B_lastWordScriptStart5_2
    B_lastWordScriptStart5_3
    B_lastWordScriptStart5_4
    B_lastWordScriptStart5_5
    B_lastWordScriptStart5_6
    B_lastWordScriptStart5_7
    B_lastWordScriptStart5_8
    B_lastWordScriptStart5_9
    B_lastWordScriptStart5_10

これらは、用途が同じものである。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_lastWordTabAllStartFlag2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

この変数は、起動時に
テキストの文字で自動的に実行の設定 の内容を保存するために用意した変数。

項目2 の
最後の文字で、自動的に実行する のチェックボックスの起動時の時点での値を保存している。

E_lastWordRestoreFirst のサブルーチンを使用した際は、この変数を利用する事になっている。

E_lastWordRestoreFirst の説明はこちらのページで。

この変数が起動時に値を保持するのは、
テキストの文字で自動的に実行の設定 の設定のファイルを読み込んだ時になる。

ユーザーが作った 起動時に実行するアイテム 内で内容を設定していたとしてもそれらの値は保持したりはしない。

    B_lastWordTabAllStartFlag3
    B_lastWordTabAllStartFlag4
    B_lastWordTabAllStartFlag5

これらは、用途が同じものである。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_LineFeedCR
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

改行を格納した変数。

`r であり、 CR の改行である。

この TRR では、 `n の文字を記入しても、 `n という文字列の扱いになる。

Ahk の様に、 LF の改行として扱わない。

あくまで、例外としていくつかの例で、改行として変換されるだけである。

よって、 TRR上では、改行を使いたい場合は、
`n などではなく、 %B_LineFeedLF% の文字を使用した方がよい。

TRR上の `n のルールは別のページで詳しく説明している。

細かい説明
文字が" "で囲まれているときのルール

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_LineFeedCRLF
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

改行を格納した変数。

`r`n であり、 CRLF の改行である。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_LineFeedLF
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

改行を格納した変数。

`n であり、 LF の改行である。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_OutputFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

通常は
%A_ScriptDir%\trrEvery\user\output.txt

のファイルパスを値に持つ変数。

userフォルダに加えない設定にある
userフォルダを変更する設定をした場合、
この値も変更する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_TmpOutputFile
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

通常は
%A_ScriptDir%\trrEvery\user\temp\outputTmp.txt

のファイルパスを値に持つ変数。

userフォルダに加えない設定にある
userフォルダを変更する設定をした場合、
この値も変更する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleClickWindow
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

マウス操作のためのウインドウ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleErrorOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

一時的な説明表示 のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleMultipleText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

二行以上のテキスト のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleNoCloseTimer
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ウインドウを閉じずに表示するタイマー一覧
&shutdownを使用した時に表示するウインドウ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

蓄え式説明表示 のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleReadFileOut
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ファイル表示用のウインドウ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleStock1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ストックの青い方 のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleStock2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

ストックの緑の方 のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleText1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト１ のウインドウタイトルを格納した変数。

userフォルダに加えない設定 の
このソフト自体のウインドウタイトルを設定する の項目を変更すると、ウインドウタイトルが変わる。

その変わったウインドウタイトルに対応している。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleText2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト２ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleText3
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

テキスト３ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleTextSplit1
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト１ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleTextSplit2
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

分割テキスト２ のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleTimer
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

タイマー一覧 のウインドウタイトルを格納した変数。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## B_WinTitleTmpOutput
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

エラー表示 のウインドウタイトルを格納した変数。
