



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_confirmDateTime6Char( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse

-----------------------------------------------------

&timer で指定する [指定する時間] の書式通りかどうかをチェックする。

引数の値が &timer の [指定する時間] の書式通りの 6桁の数字なら True を返す。

それ以外なら False を返す。

-----------------------------------------------------
引数1

    引数の値が &timer の [指定する時間] の書式通りの 6桁の数字なら True を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_confirmHMSSentence( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse

-----------------------------------------------------

&wait で指定する [指定する時間] の書式通りかどうかをチェックする。

引数の値が &wait の [指定する時間] の書式通りの文字なら True を返す。
1h 1m 1sなど

それ以外なら False を返す。

-----------------------------------------------------
引数1

    引数の値が &wait の [指定する時間] の書式通りの文字なら True を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_dateAndTimeNow( )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
今の日付と時間を返す

-----------------------------------------------------

単純に今の日付と時間を返す関数。

2020年01月01日 23時59分59秒
といった文字列を返り値にする。

ただ単に
FormatTime, [変数名], %A_Now%, yyyy年MM月dd日 HH時mm分ss秒

を使っている。

当然、パソコンの日付と時間に依存する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_ErrorLevel_TextRunRunCheck( errorMessage )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse

-----------------------------------------------------

ErrorLevel_TextRunRun の変数の値が 1 以上なら、 False を返す。

それ以外なら True を返す。

ErrorLevel_TextRunRun の変数の値が 1 以上なら、 errorMessage の文字をエラー表示する。

-----------------------------------------------------
引数1

    ErrorLevel_TextRunRun の変数の値が 1 以上の時に表示される文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_ErrorLevel_TextRunRunRestore( )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

ErrorLevel_TextRunRun の変数を初期値に戻す。
ErrorLevel_TextRunRun = 0

をした場合と同じ。

TRR 上のスクリプトでは、 ErrorLevel の変数は意味を成さない。

ErrorLevel が発生した場合、
ErrorLevel_TextRunRun の変数に値を代入するようにしている。

ErrorLevel_TextRunRun は、自動的に初期化されず、値を維持するため
一応 ErrorLevel の変わりに使用することができると思う。

ErrorLevel_TextRunRun は、自動的に初期化されたりしない。

よって、 ErrorLevel_TextRunRun を使う処理を記述する場合は、かならず、処理の前後にこの関数を置くなどの工夫をしなければいけないことになる。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_errorOutput( append )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

エラー表示 に、引数の文字を出力する。

追加で出力する。
後、最後に改行を加える。

-----------------------------------------------------
引数1

    出力する文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getControl( GuiNum,  controlVar )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
コントロールから取得した文字

-----------------------------------------------------
GuiControlGet, %controlVar%, %GuiNum%:

を使用した関数。

Ｇｕｉのコントロールの文字を取得する簡易的な関数である。

Text のコントロールや
Edit のコントロールの文字を取得することを目的した関数である。

返り値はコントロールから取得した文字である。

Ｇｕｉのコントロールの文字を取得する関数は、他に
F_GuiControlGet(GuiNum, controlVar, option="_", value="_")

もある。

controlVar には、変数名の文字列を入れる。
V_var1 := F_getControl( GuiNum, "VarName" )

といった感じである。

B_conText1_Edit1 といった変数は、コントロールの変数名を格納した変数なので、
V_var1 := F_getControl(B_GuiNumText1, B_conText1_Edit1)

とった指定の仕方になる。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する個所。
引数2

    コントロールの変数名を指定する個所。 文字列で記入する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getConvertCollabTextWord( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
変換後の文字列

-----------------------------------------------------

&collabText や &stockExeAllBlue などで使用できる、
D_stockBlue_1$$ などの文字を変換して取得できる。

D_stockBlue_1$$ などの文字についての説明は別のページでする

細かい説明 $$が付く文字

引数の値の中に、 D_stockBlue_1$$ などの文字列があると、 D_stockBlue_1$$ なら、
ストックの 1 の入力欄の文字に変換されて返り値として返す。

変換するものが無い場合は元の文字列を返す。

-----------------------------------------------------
引数1

    文字列を指定。
    文字列の中に、 D_stockBlue_1$$ などの文字列があると、変換して返り値として返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getDateTime6CharFromKanji( sentence="二十三時三分三十秒", errorNotViewFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
時間を表す 6 桁の数字

-----------------------------------------------------

漢数字や全角文字から &timer の規定のコマンドで使われるような時間を表す 6 桁の数字を返す。

時 分 秒 の単語から、時間を解析する。

二十三時五十九分五十九秒 なら
235959 に変換する。

2 、 4 、 6 桁の数字の場合のみ、時間を表す数字かどうかを調べて、 6 桁の数字を返す。

12 は
120000

1234 は
123400
になる。

dateTime形式のの数字の場合も、 6 桁の数字のみを返す。

20210101235959 は
235959
になる。

少しでも書式に合わない引数の場合、エラーが出力され
返り値は error の文字列になる。

他にも、

午後十一時 といった指定も可能。

半の語句も使用できる。
一時半
一時一分半

23:59:59 の形式も指定可能

スペースで区切られている必要はあるものの、前後に余計な文字があったとしても時間を指定する文字だけを分析して、時間の部分だけを返す様にしている。

その場合、余計な前後の文字は無視されるので返り値には省かれた状態になる。

時間 の部分の指定は、 時 と指定しなければならない。

F_getHMSSentenceFromKanji( ) の場合は、
時間 と指定する必要があるが、こちらは 時 と指定する。

errorNotViewFlag の引数があるが、これに True を代入していた場合、エラーがあってもエラーを出力しないようにする。

-----------------------------------------------------
引数1

    文字列。

    少しでも書式に合わない引数の場合、エラーが出力され
    返り値は error の文字列になる。
引数2

    True か False を指定する。
    True の場合、エラーがあってもエラーを出力しないようにする。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getHMSSentenceFromKanji( sentence="三分三十秒", errorNotViewFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
1h  1m  1s といった文字に変換

-----------------------------------------------------

漢数字や全角文字から、 &wait の規定のコマンドで使われる様な、
時間を表す  1h  1m  1s  といった文字に変換して返す。

時間 分 秒 の単語から、時間を解析する。

二十三時間五十九分五十九秒 なら
23h 59m 59s に変換する。

元々、1h  1m  1s といった文字なら、そのまま返す。

数字のみの場合はエラー。

少しでも書式に合わない引数の場合、エラーが出力され
返り値は error の文字列になる。

他にも、
半の語句も使用できる。
一時間半
一分半

23:59:59 の形式も指定可能

スペースで区切られている必要はあるものの、前後に余計な文字があったとしても時間を指定する文字だけを分析して、時間の部分だけを返す様にしている。

その場合、余計な前後の文字は無視されるので返り値には省かれた状態になる。
諸注意

時間 の部分は
十時 ではなく、
十時間 で指定しなければならない。
時ではなく、 時間の文字を使う事。

F_getDateTime6CharFromKanji( ) の場合は、
時 と指定する必要があるが、こちらは 時間 と指定する。

errorNotViewFlag の引数があるが、これに True を代入していた場合、エラーがあってもエラーを出力しないようにする。

-----------------------------------------------------
引数1

    文字列。

    少しでも書式に合わない引数の場合、エラーが出力され
    返り値は error の文字列になる。
引数2

    True か False を指定する。
    True の場合、エラーがあってもエラーを出力しないようにする。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getItemArgument( itemName )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
アイテムの引数

-----------------------------------------------------

アイテムの引数を返す。

引数にアイテム名を指定する。

アイテム名でないなら、カラの文字を返す。

種類 が、 ソフト・ファイル の アイテムでなければ意味をなさない。

-----------------------------------------------------
引数1

    アイテム名を指定する。
    そのアイテムの引数を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getItemType( itemName )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
アイテムの種類の番号

-----------------------------------------------------

アイテムの種類の番号を返す。

引数にアイテム名を指定する。

アイテムの種類が
ソフト・ファイルなら 	1
フォルダなら 	2
スクリプトなら 	3
二行以上のアイテムなら 	4

を返す。

アイテム名でないなら、 0 を返す。

-----------------------------------------------------
引数1

    アイテム名を指定する。
    そのアイテムの種類の番号を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getItemScript( itemName )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
アイテムのスクリプト リンク先

-----------------------------------------------------

アイテムのスクリプト リンク先 を返す。

引数にアイテム名を指定する。

アイテム名でないなら、カラの文字を返す。

-----------------------------------------------------
引数1

    アイテム名を指定する。
    そのアイテムのスクリプト リンク先 を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getItemWorkingFolder( itemName )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
アイテムの作業フォルダ

-----------------------------------------------------

アイテムの作業フォルダを返す。

引数にアイテム名を指定する。

アイテム名でないなら、カラの文字を返す。

種類 が、 ソフト・ファイル の アイテムでなければ意味をなさない。

-----------------------------------------------------
引数1

    アイテム名を指定する。
    そのアイテム作業フォルダを返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getParentFolder( file, textOutFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
ファイルパスなら、それの上位フォルダ。

-----------------------------------------------------

上位フォルダを返す。

file の引数に、ファイルパスを指定する。

そのファイルパスが存在するフォルダ 親フォルダ を返す。

file の引数に、ファイルパスが存在しないなら、カラの文字を返す。

textOutFlag の引数は、
file の引数の値に ## や %% で囲まれている文字があったら、返り値もその文字を展開した後にするか、展開しないままにするかの指定。

True なら、展開した状態で上位フォルダを返す。

False なら、 ## や %% で囲まれている文字をそのままの文字にしておく。

True でも False でも、 file の値のファイルパスが存在するかどうかは、 ## や %% を一度展開して確認する。

-----------------------------------------------------
引数1

    ファイルパスを指定する。
    ファイルパスなら、それの上位フォルダを返す。
引数2

    True か False を指定する。
    ## や %% で囲まれている文字があったら、返り値もその文字を展開した後にするか、展開しないままにするかどうか。

    True なら、展開した状態で上位フォルダを返す。
    False なら、 ## や %% で囲まれている文字をそのままの文字にしておく。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getShortcutPath( shortcutFile )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
ショートカットの、本体のファイルパス

-----------------------------------------------------

ショートカットの、本体のファイルパスを取得する。

引数にファイルパスを指定する。

引数の値がショートカットのファイルパスでない場合は、カラの文字を返す。

この関数では、 本体のファイルパスに続く引数 パラメーター は取得できない。

F_getShortcutPathAndArgs( shortcutFile ) の方を使えば、 本体のファイルパス と 引数も取得する。

似たようなものに、
Alt+Shift+P &shortCutPath
があるが、これは変数に代入したりはできない。

-----------------------------------------------------
引数1

    ショートカットのファイルパスを指定する。
    ショートカットの、本体のファイルパスを返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getShortcutPathAndArgs( shortcutFile )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
ショートカットの、本体のファイルパス と 引数

-----------------------------------------------------

ショートカットのリンク先 本体のファイルパス と 引数 を取得する。

引数にファイルパスを指定する。

引数の値がショートカットのファイルパスでない場合は、カラの文字を返す。

F_getShortcutPath( shortcutFile ) との違いは、
こちらは、本体のファイルパス のみ取得する。

この F_getShortcutPathAndArgs( shortcutFile ) の方は、
本体のファイルパス と 引数も取得する。
[本体のファイルパス] + スペース + [引数]

の形が返り値である。

-----------------------------------------------------
引数1

    ショートカットのファイルパスを指定する。
    ショートカットのリンク先 本体のファイルパス と 引数 を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getTextEditExecutor( trimFlag=True )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
テキストの入力欄の文字

-----------------------------------------------------

実行元のテキストの入力欄の文字を所得する。

使用できるのは、 テキストのＧｕｉのみが対象である。

一行テキスト 、 分割テキスト のみが対象になる。
二行以上のテキスト では対象にならない。

分割テキスト で動作させていた場合、フォーカスされている入力欄の文字を取得する。

trimFlag の引数は
Trim( ) の関数を最後に使用するかどうか。

True か引数を省略したなら、前後のスペースとタブの文字が取り除かれる。

一応、 &parsentss や &sharpss のようなものを自作する時のために用意している。

この F_getTextEditExecutor( ) と、
&outArgsToTextEditExecutor と
&sendEndToTextEditExecutor を使えばそれが可能かもしれない。

-----------------------------------------------------
引数1

    True か False を指定する。
    True なら、前後のスペースやタブの文字が取り除かれる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getTextGuiAssign( GuiNum, number=1, trimFlag=True )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
テキストの入力欄の文字

-----------------------------------------------------

テキストの入力欄の文字を所得する。

使用できるのは、 テキストのＧｕｉのみが対象である。

一行テキスト 、 分割テキスト 、 二行以上のテキスト のみで使用できる。

GuiNum の引数に
テキストのＧｕｉの番号を指定する。
B_GuiNumText1 などを指定することが前提。

number の引数に
上から何番目の入力欄かを指定。
分割テキストでなければ意味を成さない。

trimFlag の引数は
Trim( ) の関数を最後に使用するかどうか。

True か引数を省略したなら、前後のスペースとタブの文字が取り除かれる。

-----------------------------------------------------
引数1

    数字を指定する。
    テキストの Ｇｕｉの番号のみが対象になる。
引数2

    数字を指定する。
    上から何番目の入力欄か。 分割テキストでなければ意味を成さない。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_getTimerInformation( listNumber, inforNumber=1 )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
タイマーの情報を返す。

-----------------------------------------------------

&timer や &wait で実行されるタイマーの情報を返り値として返す。

タイマー一覧 のウインドウにある 10種類のタイマーに関する情報と同じ。

タイマーが実行中かどうかや、残り時間や、実行しようとしているスクリプトを返り値として返す。

listNumber の引数に、タイマーの番号を指定する。

返り値として返すのはその番号のタイマーの情報になる。

inforNumber の引数には、情報の種類を番号で指定する。
1 	残り時間の秒数を返すようにする。
2 	実行しようとしているスクリプトを返すようにする。
3 	listNumber で指定した番号のタイマーが実行中かどうかを返すようにする。
実行中なら 1 を、
そうでないなら 0 を返す。

何らかのエラーがあった場合は error の文字を返り値として返す。
エラーも出力される。

inforNumber に 3 以外を指定していた場合は、
listNumber に指定した番号のタイマーが実行中でない場合もエラーとして扱う。

-----------------------------------------------------
引数1

    タイマーの番号を指定する。
    その番号のタイマーの情報を返り値として返す。
引数2

    返す情報の種類を番号で指定する。
    1 	残り時間を返す。
    秒数で返す。
    2 	実行しようとしているスクリプトを返す。
    3 	指定した番号のタイマーが実行中かどうかを返す。
    実行中なら 1 を、
    そうでないなら 0 を返す。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_Gui( GuiNum, option, value1="_", value2="_", value3="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
Gui, GuiNum:sub-command [, Param2, Param3, Param4]

を実行する関数。

Gui を作成、操作をする。

option が Sub-command に
value1 が Param2 に
value2 が Param3 に
value3 が Param4 に該当する。

value の指定がいらない場合、カラの文字ではなく
_ アンダーバー の文字を入れる。

カラでは、カラの文字を明示的に指定する事になってしまう。

例

; テキスト１の入力欄の下に文字を追加
F_Gui( B_GuiNumText1, "Add", "Text", "X20 y+5", "テキスト１に文字を追加" )
; テキスト１の高さを 90px にする
F_Gui( B_GuiNumText1, "Show", "h90" )

-----------------------------------------------------
引数1

    Gui の番号を指定する。
引数2

    Gui の Ahkコマンドの Sub-command の部分。
引数3

    Gui の Ahkコマンドの Param2 の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。
引数4

    Gui の Ahkコマンドの Param3 の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。
引数5

    Gui の Ahkコマンドの Param4 の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_GuiAddPictureFileExist( GuiNum, file, option )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse

-----------------------------------------------------
Gui, %GuiNum%:Add, Picture, %option%, %file%

を実行する。

画像ファイルがあるかを確認して、画像を追加する。

画像が見つかれば、画像を追加して True を返す。

見つからなければ、何もせず False を返す。

例

F_GuiAddPictureFileExist( B_GuiNumText1, B_DocFolder .  "\icon\Suspend.ico", "X20 y+5 w32 h32" )
F_Gui( B_GuiNumText1, "Show", "h90" )

-----------------------------------------------------
引数1

    Gui の番号を指定する。
引数2

    画像のファイルパスを指定する。
引数3
    Gui, %GuiNum%:Add, Picture, %option%, %file%

    の option の部分。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_GuiAddPictureNoExtFile( GuiNum, noExtFile, option )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse

-----------------------------------------------------

画像ファイルがあるかを確認して、画像を追加する。

F_GuiAddPictureFileExist( GuiNum, file, option )
と違い、引数の noExtFile に拡張子を含めないファイルパスを指定する。

その、拡張子なしで指定したファイルパスに

    .gif .jpg .jpeg .png 

のいずれかを足したファイルが見つかればその画像を追加する。

引数の noExtFile で指定したファイルが存在するなら、そちらを使用する。

つまり、拡張子なし、拡張子ありのどちらを指定してもよい。
よって、 F_GuiAddPictureFileExist( GuiNum, file, option )
と同じと思ってよい。

画像が見つかれば、画像を追加して True を返す。

見つからなければ、何もせず False を返す。

例

; 画像のファイルパスを拡張子無しで指定している。
; おまけで、画像が無い場合は文字のＧｕｉで追加する
V_var1 := F_GuiAddPictureNoExtFile( B_GuiNumText1, B_DocFolder . "\clickWindow\clickEveryInput", "X20 y+5 w64 h64  gE_showEverInputGuiToggle" )
if( V_var1 == False ){
    Gui, %B_GuiNumText1%:Add, Text, X20 y+5 w64 h64  gE_showEverInputGuiToggle  Center Border, 入力補完一覧
}
F_Gui( B_GuiNumText1, "Show", "h120" )

-----------------------------------------------------
引数1

    Gui の番号を指定する。
引数2

    画像のファイルパスを指定する。
    拡張子を含めないファイルパスを指定すると、

        .gif .jpg .jpeg .png 

    のいずれかを足したファイルがないかを確認する。
引数3
    Gui, %GuiNum%:Add, Picture, %option%, %file%

    の option の部分。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_GuiControl( GuiNum, controlVar, option, value ="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
GuiControl, GuiNum:Sub-command, ControlID [, Param3]

を実行する関数。

Gui のコントロールに、valueの値を指定して操作をする簡易的な関数。

controlVar が ControlID に
option が Sub-command に
value が Param3 に該当する。

value の指定がいらない場合、カラの文字ではなく
_ アンダーバー の文字を入れる。

カラでは、カラの文字を明示的に指定する事になってしまう。

B_conText1_Edit1 といった変数は、コントロールの変数名を格納した変数なのでこれらを使う場合は、
F_GuiControl( B_GuiNumText1, B_conText1_Edit1, "", "文字列" )

とった指定の仕方になる。

-----------------------------------------------------
引数1

    Gui の番号を指定する。
引数2

    GuiControl の Ahkコマンドの ControlID の部分。
引数3

    GuiControl の Ahkコマンドの Sub-command の部分。
引数4

    GuiControl の Ahkコマンドの Param3 の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_GuiControlGet( GuiNum, controlVar, option="_", value="_")
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
コントロールの内容を取得した文字。

-----------------------------------------------------
GuiControlGet, OutputVar [, GuiNum:Sub-command, ControlID, Param4]

を実行する関数。

Gui のコントロールの内容を取得をする簡易的な関数。

controlVar が ControlID に
option が Sub-command に
value が Param4 に該当する。

OutputVar を指定する箇所がありません。
返り値がコントロールの内容を取得した文字になる。

B_conText1_Edit1 といった変数は、コントロールの変数名を格納した変数なのでこれらを使う場合は、
V_var1 := F_getControl( B_conText1_Edit1, B_GuiNumText1 )

とった指定の仕方で使う。
V_var1 := F_GuiControlGet( B_GuiNumText1, B_conText1_Edit1, "_", "_" )

または、
V_var1 := F_GuiControlGet( B_GuiNumText1, B_conText1_Edit1 )

とった指定の仕方でも使える。

option と value の指定がいらない場合、カラの文字ではなく
_ アンダーバー の文字を入れる。

カラでは、カラの文字を明示的に指定する事になってしまう。
カラを指定する場合

-----------------------------------------------------
引数1

    Gui の番号を指定する。
引数2

    GuiControlGet の Ahkコマンドの ControlID の部分。
引数3

    GuiControlGet の Ahkコマンドの Sub-command の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。
引数4

    GuiControlGet の Ahkコマンドの Param4 の部分。
    省略する場合は、 _ アンダーバー の文字を入れる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_hideGuiTextAndWaitActiveAny( )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

実行元の テキスト を閉じる。

閉じた後、
WinWaitActive, A, , 1
を使って、何らかのウインドウがアクティブになるのを少し待つ。

尚、実行元の テキスト を閉じる際、
設定 の テキストを閉じるのではなく、最小化させるようにする のチェックボックスの影響を受ける。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_hideGuiTextAndWaitActiveIfA( winTitle="A" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

実行元の テキスト を閉じる。

引数の値が、
A の文字列であった時のみ、実行元の テキスト を閉じる。

F_hideGuiTextAndWaitActiveAny( )
とほぼ同じだが、
WinWaitActive, A, , 1
を使用しない。

こちらも、実行元の テキスト を閉じる際、
設定 の テキストを閉じるのではなく、最小化させるようにする のチェックボックスの影響を受ける。

-----------------------------------------------------
引数1

    ウインドウタイトルを指定する部分。
    A の文字列であった時のみ、実行元の テキスト を閉じる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_hideGuiTextPattern( GuiNum )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキスト を閉じる。

引数にＧｕｉの番号を指定する。

使用できるのは、 テキスト のＧｕｉのみが対象である。

    一行テキスト 分割テキスト 二行以上のテキスト 

のみで使用できる。

例
F_hideGuiTextPattern( B_GuiNumText1 )

説明表示のウインドウも一緒に閉じるようにしてある。

設定 の テキストを閉じるのではなく、最小化させるようにする のチェックボックスの影響を受ける。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する。
    使用できるのは、 テキスト のＧｕｉのみが対象である。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_hideGuiTextPatternOption( GuiNum, outGuiHideFlag="1", minimizeOption="1" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキスト を閉じる。

F_hideGuiTextPattern( GuiNum )
を細かく指定するタイプ。

使用できるのは、 テキスト のＧｕｉのみが対象である。

    一行テキスト 分割テキスト 二行以上のテキスト 

のみで使用できる。

outGuiHideFlag の引数には、
説明表示系のウインドウも一緒に閉じるかどうか の指定。

True なら、説明表示系のウインドウも一緒に閉じる。

それ以外なら Falseなら 、それをしない。

minimizeOption の引数には、
設定 の テキストを閉じるのではなく、最小化させるようにする の設定の影響を受けるかどうか。

True なら、設定の影響を受ける。

それ以外なら Falseなら 、設定の影響は無関係。

あくまで、設定の影響をうけるかどうかであって、最小化の動作を指定するわけではない点に注意が必要。

明示的に最小化させる場合は、
Gui, %GuiNum%:Minimize
や
F_minimizeGui( GuiNum ) を使う。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する。
    使用できるのは、 テキスト のＧｕｉのみが対象である。
引数2

    説明表示系のウインドウも一緒に閉じるかどうか の指定。

    True なら、説明表示系のウインドウも一緒に閉じる。
    それ以外なら Falseなら 、それをしない。
引数3

    設定 の テキストを閉じるのではなく、最小化させるようにする の設定の影響を受けるかどうか。

    True なら、設定の影響を受ける。
    それ以外なら Falseなら 、設定の影響は無関係。



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_imeGet( )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
全角入力の状態なら 1
半角入力の状態なら 0

-----------------------------------------------------

半角入力か、全角入力かを確認する。

最前面のウインドウ内が対象。

全角入力の状態なら、1
半角入力の状態なら、0
を返す。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_imeSet( flag=1 )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

半角入力か、全角入力かを操作する。

引数が、
1 なら 全角入力 に
0 なら 半角入力 にする。

最前面のウインドウ内が対象。

-----------------------------------------------------
引数1

    1 なら 全角入力 に
    0 なら 半角入力 にする。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_inputListSelectOutputAssign( GuiNum )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
TrueかFalse 

-----------------------------------------------------

バージョン 2.00.01 から 

-----------------------------------------------------


入力補完が表示している時、入力補完で選択されている文字を 一行テキスト の入力欄に出力する。

引数には 一行テキスト のＧｕｉの番号を指定する。

この関数を実行した時は、その指定した 一行テキスト も表示している必要がある。

一行テキスト 以外のＧｕｉの番号を指定する事は想定していない。

分割テキスト のＧｕｉの番号を指定しても、 一番上の入力欄に出力するだけになる。


基本は、 常時使用のキー から使用するものである。
補足

「作りたいのはやまやまですけど」 のブログで紹介した 「いつでも入力補完」 のために用意した関数。

既存の関数や規定のコマンドなどでは実現できなかったので、 TRR のソースコード内の
edi_pushEnterFromListEditAnotherGui( ) の関数を使用したが、それの代替えとして用意したのがこの関数。
作りたいのはやまやまですけど
いつでも入力補完


返り値は、出力できたら True を返す。
そうでなければ False を返す。

指定している 一行テキスト が表示されてない場合などは失敗して False になる。
諸注意

この関数は、 一行テキスト に対して使う事だけを想定しているが、 一行テキスト 以外のＧｕｉの番号を指定してもエラーになるようにはしていない。

返り値が False になるのは、出力されてない場合だけであり、 一行テキスト 以外を指定したから False を返す訳ではない。


-----------------------------------------------------
引数1

    一行テキスト のＧｕｉの番号を指定する。
    入力補完の文字を、指定している 一行テキスト の入力欄に出力する。 


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_inputListUpDownKey( number )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキスト上の

    上 下 PageUp PageDown 

のキーと同じ動作をさせる。

テキスト上では、

    上 下 PageUp PageDown 

のキーは、
入力補完の選択している位置を変えるキーとして独自の動作をする。

この関数を使うことで、同じ動作を別のキーに指定するといったことができる。

分割テキスト上でも使用できる。

引数で動作させるキーを指定する。
数字で指定する。

1 上
2 下
3 PgUp
4 PgDown
5 Home

なお、 テキスト上のキーとして登録する際は、
%-- を右端に記述する必要がある。

これがないと、実行元の引数が邪魔になってしまう。

-----------------------------------------------------
引数1

    動作させるキーを指定する。
    数字で指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_itemExe( itemName, args="" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
引数がアイテム名の場合は True、
そうでなかった場合は False

-----------------------------------------------------
アイテムを実行する。

引数が、 アイテム名 の文字列の場合は True

そうでなかった場合は False を返す。

似たようなものに
F_textExe( command )
があるが、
この F_itemExe( itemName, args )
の方は、 アイテム名であったときのみ実行する。

こちらの方が無駄な処理をしない分、少し処理が効率的である。

-----------------------------------------------------
引数1

    アイテム名 を指定する。
引数2

    アイテムに引数を指定して実行する時と同じ。
    引数を指定してアイテムを実行させる時に指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_itemReloadOneFromFileName( itemName, itemCategoryDir="", categoryDir="" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
0 から 3 の数字

-----------------------------------------------------

fromFileName から登録する アイテム を一つだけ再読み込みする。

fromFileName の item フォルダの中にその アイテム名 の情報があれば、それを登録する。

itemName の引数に、 アイテム名を指定する。

itemCategoryDir の引数には、
アイテムのカテゴリーフォルダにアイテムの情報がある場合、そのフォルダ名を指定する。

フォルダ名の最後に _ があるフォルダの事。
このフォルダはアイテムではなくアイテムのカテゴリー用のフォルダになる。

categoryDir の引数には、
カテゴリーフォルダ名を指定する。

カテゴリーフォルダについて一応あげておきます。

普通の使い方 カテゴリーフォルダ

既にアイテムが登録されている場合は、そのアイテムの情報は無くなり上書きされる。
つまり編集する。

この場合、 itemCategoryDir と categoryDir はカラの文字を指定するか指定を省略すると、 アイテム の情報から カテゴリーフォルダと アイテムのカテゴリーフォルダを調べて対処するようになっている。 編集の場合はむしろ指定しない方がよい。

まだアイテムが登録されていなければ新規登録扱いになる。

新規登録の場合は、 categoryDir の指定が必要。
アイテムのカテゴリーフォルダの中にある アイテム を指定する場合は、 itemCategoryDir の方も指定する必要がある。

なお、 categoryDir の指定は、 first を指定する場合は、カラの文字でもよかったりする。

エラーがあった場合だが、
既にアイテムが登録されている場合は、エラーがあったとしても、元のアイテムの情報は無くなる。

返り値は
エラーがある場合 	0
編集した場合 	1
新規登録した場合 	2

アイテムを削除した後にエラーがある場合は 3
を返す。

似たようなものとして、規定のコマンドに
&itemReloadOneFromFileName がある。

出来ることは同じである。
ただし、こちらは引数の順番が違う点に注意が必要である。
&itemReloadOneFromFileName  [カテゴリーフォルダ名]  [アイテムのカテゴリーフォルダ名]  [アイテム名]

-----------------------------------------------------
引数1

    アイテム名を指定する。
引数2

    アイテムのカテゴリーフォルダにアイテムの情報がある場合、
    アイテムのカテゴリーフォルダを指定する。
    編集の場合はカラの文字でもよい。
引数3

    カテゴリーフォルダを指定する。
    編集の場合はカラの文字でもよい。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_kanjiAndFullNumeralReplaceInteger( sentence, errorNotViewFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
変換した文字

-----------------------------------------------------

漢数字を数字に変換する。

後、全角文字の数字を半角の数字に変える。

例

九万九千九百九十九 は
99999 になる。
現時点では

万の桁までしか対応しない。 九万まで。

引数には、漢数字などを入れなければならない。

少しでも書式に合わない引数の場合、エラーが出力され
返り値は error になる。

数字を指定する分にはエラーにはならない。

errorNotViewFlag の引数があるが、これに True を代入していた場合、エラーがあってもエラーを出力しないようにする。

-----------------------------------------------------
引数1

    漢数字を指定する。
    半角の数字に変換して返す。
引数2

    True か False を指定する。
    True の場合、エラーがあってもエラーを出力しないようにする。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_lastWordSetFirstNumAllFromAllLineStr( firstNum
, allLineStr
, blankComment="#"
, passComment="["
, keyTrimBefore="<"
, keyTrimAfter=">" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
マニアック

-----------------------------------------------------
引数1

    数字を指定。
    O_lastWordKey[引数１]_1
    O_lastWordScript[引数１]_1
    の変数に代入する。
引数2
    [キーになる文字]=[実行処理]

    の形で記入された、
    10 行のリスト形の文字列を指定する。
引数3

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方をカラの状態にするコメント文になる。
引数4

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方を前の状態に残すコメント文になる。
引数5

    キーになる文字に代入する際、
    取り除かれる左側の文字。
    左側に半角スペースを置きたい時のために使用する文字。
引数6

    キーになる文字に代入する際、
    取り除かれる右側の文字。
    右側に半角スペースを置きたい時のために使用する文字。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_lastWordSetOneFromAllLineStr( firstNum
, secondNum
, allLineStr
, blankComment="#"
, passComment="["
, keyTrimBefore="<"
, keyTrimAfter=">" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
あり

-----------------------------------------------------
諸注意

この関数は今後は廃止になるかもしれない。

F_lastWordSetFirstNumAllFromAllLineStr() 内で使われる関数。
マニアック

-----------------------------------------------------
引数1

    数字を指定。
    O_lastWordKey[引数１]_[引数２]
    O_lastWordScript[引数１]_[引数２]
    の変数に代入する。
引数2

    数字を指定。
    O_lastWordKey[引数１]_[引数２]
    O_lastWordScript[引数１]_[引数２]
    の変数に代入する。
引数3
    [キーになる文字]=[実行処理]

    の形で記入された、
    10 行のリスト形の文字列を指定する。

    この関数では、その中の一行のみ取り上げる。
    次の行以降の文字を引数として返す。
引数4

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方をカラの状態にするコメント文になる。
引数5

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方を前の状態に残すコメント文になる。
引数6

    キーになる文字に代入する際、
    取り除かれる左側の文字。
    左側に半角スペースを置きたい時のために使用する文字。
引数7

    キーになる文字に代入する際、
    取り除かれる右側の文字。
    右側に半角スペースを置きたい時のために使用する文字。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_lastWordSetOneLineStr( firstNum
, secondNum
, oneLineStr
, blankComment="#"
, passComment="["
, keyTrimBefore="<"
, keyTrimAfter=">" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
諸注意

この関数は今後は廃止になるかもしれない。

F_lastWordSetFirstNumAllFromAllLineStr() 内で使われる関数。
マニアック

-----------------------------------------------------
引数1

    数字を指定。
    O_lastWordKey[引数１]_[引数２]
    O_lastWordScript[引数１]_[引数２]
    の変数に代入する。
引数2

    数字を指定。
    O_lastWordKey[引数１]_[引数２]
    O_lastWordScript[引数１]_[引数２]
    の変数に代入する。
引数3
    [キーになる文字]=[実行処理]

    の形で記入された文字列を指定する。
引数4

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方をカラの状態にするコメント文になる。
引数5

    コメントになる文字の指定。
    この文字が先頭にあると、その一行は処理されない文になる。

    キーになる文字と、実行処理の両方を前の状態に残すコメント文になる。
引数6

    キーになる文字に代入する際、
    取り除かれる左側の文字。
    左側に半角スペースを置きたい時のために使用する文字。
引数7

    キーになる文字に代入する際、
    取り除かれる右側の文字。
    右側に半角スペースを置きたい時のために使用する文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_lastWordTabChange( number=1 )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキストの文字を自動的に実行の設定 のタブを切り替える。

引数にタブの番号を入れる。

-----------------------------------------------------
引数1

    数字を指定。
    テキストの文字を自動的に実行の設定 のウインドウ内のタブが切り替わる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_linefeedReplace( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
改行に置換した文字。

-----------------------------------------------------

`r の文字を CRの改行 に、

`n の文字を LFの改行 に置換する。

それらの文字が無いなら、元の文字列を返す。

Ahk と違い、 TRR では、
`r や `n の文字は改行として扱われず、
ただの `r や `n の文字という扱いになる。

ただし、例外的に改行に変換する場合もある。

その事については別のページで説明する。

細かい説明
文字が" "で囲まれているときのルール

TRR上で `n の文字を改行として使いたい場合は、この関数を使って変換させる必要がある。

-----------------------------------------------------
引数1

    文字列。
    `r の文字を CRの改行 に、
    `n の文字を LFの改行 に置換する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_linefeedReplaceOnEscapeCharacter( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
改行を `r や `n に置換した文字。

-----------------------------------------------------

CRの改行を `r の文字に、

LFの改行を `n の文字に置換する。

それらの文字が無いなら、元の文字列を返す。

つまり、
F_linefeedReplace( str ) と逆である。

複数行の文字を一行にしたい時などに使う。

-----------------------------------------------------
引数1

    文字列。
    CRの改行を `r の文字に、
    LFの改行を `n の文字に置換する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_minimizeGui( GuiNum )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

TRR のＧｕｉを最小化させる。
Gui, %GuiNum%:Minimize

を実行させる。

現時点ではそれだけである。

F_hideGuiTextPattern( GuiNum ) のように、
説明表示のウインドウ を一緒に閉じたりなどはできない。

TRR上のＧｕｉなら自作したＧｕｉでも使用できる。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_multiplelineExe( command )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

二行以上のテキスト と同じ処理をする。

似たようなものに、規定のコマンドの
&multiplelineExe がある。

&multiplelineExe は `n の文字を改行に変換するが、
F_multiplelineExe( command ) は それはやらない。

-----------------------------------------------------
引数1

    処理させるスクリプトを指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_output( append )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

蓄え式説明表示 に、引数の文字を出力する。

追加で出力。

-----------------------------------------------------
引数1

    文字列。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_setControl( GuiNum, controlVar, value )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
GuiControl,%GuiNum%: , %controlVar%, %value%

を実行する関数。

Ｇｕｉのコントロールに、 value の値をセットする簡易的な関数。

Text のコントロールや、 Edit のコントロールに
文字をセットすることを目的としたもの。

Ｇｕｉのコントロールを操作する関数は、他に
F_GuiControl(GuiNum,controlVar,option,value="_")
もある。

controlVar の引数には、
変数名の文字列を入れる。
F_setControl( GuiNum, "VarName", value )

といった感じ。

B_conText1_Edit1 といった変数は、コントロールの変数名を格納した変数なのでこれらを使う場合は、
F_setControl( B_GuiNumText1, B_conText1_Edit1, "文字列" )

とった指定の仕方になる。

value の引数には、
コントロールにセットしたい文字列を入れる。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を入れる。
引数2

    コントロールの変数名の文字列を入れる。
引数3

    コントロールにセットしたい文字列を入れる。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_setTextGuiAssign( value, GuiNum, number=1, textOutFlag=True, addFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキストの入力欄に文字を出力する。

使用できるのは、 テキストのＧｕｉのみが対象である。

    一行テキスト 分割テキスト 二行以上のテキスト 

のみで使用できる。

引数の意味は下記を参考に。

-----------------------------------------------------
引数1

    出力する文字。
引数2

    テキストのＧｕｉの番号を指定。
引数3

    上から何番目の入力欄か。
    分割テキストでなければ意味を成さない。
引数4

    # # や % % で囲まれていれば、展開するかどうかを指定する。
引数5

    上書きするか、追加する文字として扱うか。
    True なら、元ある文字に、スペースを足した後に追加する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_showLastWord( option="_", toggleFlag=True, sleepFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキストの文字で自動的に実行の設定 のウインドウを表示する。

option の引数には、
表示する時の状態を指定する。
Gui, GuiNum:Show, [この部分]

この部分 の指定と同じ指定方法になる。

指定しない場合、カラの文字ではなく、
"_" アンダーバー を入れる。
または、引数自体を省略する。

toggleFlag の引数は、
True の場合、すでに表示してる時に使用した場合は閉じる。

sleepFlag
マニアック

-----------------------------------------------------
引数1

    表示する時の状態を指定する。
    Gui, GuiNum:Show, [この部分]

    この部分 の指定と同じ指定方法になる。

    指定しない場合、カラの文字ではなく、
    "_" アンダーバー を入れる。
    または、引数自体を省略する。
引数2

    TrueかFalse を指定する。
    True の場合、すでに表示してる時に使用した場合は閉じる。
引数3

    TrueかFalse を指定する。
    True の場合、 Sleep を使用して待機させてから表示させるようにする。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_showToggleGui( GuiNum, option="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

TRR のウインドウを表示する。

すでに表示している時に使うと閉じる動作になる。

引数にＧｕｉの番号を指定する。
注意

あくまで、 TRR の既存のウインドウにのみ動作する。

自作したＧｕｉの番号では動作しない。

option の引数には、
表示する時の状態を指定する。
Gui, GuiNum:Show, [この部分]

この部分 の指定と同じ指定方法になる。

指定しない場合、カラの文字ではなく、
"_" アンダーバー を入れる。
または、引数自体を省略する。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する。
引数2

    表示する時の状態を指定する。
    Gui, GuiNum:Show, [この部分]

    この部分 の指定と同じ指定方法になる。

    指定しない場合、カラの文字ではなく、
    "_" アンダーバー を入れる。
    または、引数自体を省略する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_showToggleGuiTextPattern( GuiNum, option="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキストのＧｕｉを表示する。

すでに表示している時に使うと閉じる動作になる。

使用できるのは、 テキストのＧｕｉのみが対象である。

    一行テキスト 分割テキスト 二行以上のテキスト 

のみで使用できる。

option の引数には、
表示する時の状態を指定する。
Gui, GuiNum:Show, [この部分]

この部分 の指定と同じ指定方法になる。

指定しない場合、カラの文字ではなく、
"_" アンダーバー を入れる。
または、引数自体を省略する。

説明表示用のウインドウも一緒に閉じるようにしてある。

設定 の テキストを閉じるのではなく、最小化させるようにする の設定の影響を受ける。

-----------------------------------------------------
引数1

    テキストのＧｕｉの番号を指定する。
引数2

    表示する時の状態を指定する。
    Gui, GuiNum:Show, [この部分]

    この部分 の指定と同じ指定方法になる。

    指定しない場合、カラの文字ではなく、
    "_" アンダーバー を入れる。
    または、引数自体を省略する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_showToggleGuiTextPatternOption( GuiNum, outGuiHideFlag=1, minimizeOption=1, option="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

テキストのＧｕｉを表示する。

すでに表示している時に使うと閉じる動作になる。

F_showToggleGuiTextPattern( GuiNum, option="_" )
を細かく指定するタイプ。

使用できるのは、 テキストのＧｕｉのみが対象である。

    一行テキスト 分割テキスト 二行以上のテキスト 

のみで使用できる。

outGuiHideFlag の引数は、
説明表示用のウインドウも一緒に閉じるかどうか。

True なら説明表示のウインドウも一緒に閉じる。
それ以外なら Falseなら、 それをしない。

minimizeOption の引数は、
設定 の テキストを閉じるのではなく、最小化させるようにする の設定の影響を受けるかどうか。

True なら設定の影響を受ける。
それ以外なら Falseなら、 設定の影響は無関係。

あくまで、設定の影響をうけるかどうかであって、
最小化の動作を指定するわけではない点に注意が必要。

明示的に最小化させる場合は、
Gui, %GuiNum%:Minimize
や
F_minimizeGui( GuiNum )
を使う。

option の引数には、
表示する時の状態を指定する。
Gui, GuiNum:Show, [この部分]

この部分 の指定と同じ指定方法になる。

指定しない場合、カラの文字ではなく、
"_" アンダーバー を入れる。
または、引数自体を省略する。

-----------------------------------------------------
引数1

    テキストのＧｕｉの番号を指定する。
引数2

    TrueかFalse を指定する。
    説明表示用のウインドウも一緒に閉じるかどうか。

    True なら説明表示のウインドウも一緒に閉じる。
    それ以外なら Falseなら、 それをしない。
引数3

    TrueかFalse を指定する。
    設定 の テキストを閉じるのではなく、最小化させるようにする の設定の影響を受けるかどうか。

    True なら設定の影響を受ける。
    それ以外なら Falseなら、 設定の影響は無関係。
引数4

    表示する時の状態を指定する。
    Gui, GuiNum:Show, [この部分]

    この部分 の指定と同じ指定方法になる。

    指定しない場合、カラの文字ではなく、
    "_" アンダーバー を入れる。
    または、引数自体を省略する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_showToggleGuiWinTitle( GuiNum, winTitle, option="_" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

ウインドウを表示する。

すでに表示している時に使うと閉じる動作をする。

引数に、Ｇｕｉの番号と、ウインドウタイトルを指定する。

F_showToggleGui( GuiNum, option ) と違い、
TRR の既存のウインドウにだけでなく、
TRR上で自作した Ｇｕｉの番号でも動作する。
変わりに、ウインドウタイトルの指定も必要。

ただし、 TRR上で自作した Ｇｕｉにのみ使用でき、
他のソフトのウインドウなどには使用できない。

option の引数には、
表示する時の状態を指定する。
Gui, GuiNum:Show, [この部分]

この部分 の指定と同じ指定方法になる。

指定しない場合、カラの文字ではなく、
"_" アンダーバー を入れる。
または、引数自体を省略する。

-----------------------------------------------------
引数1

    Ｇｕｉの番号を指定する。
引数2

    ウインドウタイトルを指定する。
引数3

    表示する時の状態を指定する。
    Gui, GuiNum:Show, [この部分]

    この部分 の指定と同じ指定方法になる。

    指定しない場合、カラの文字ではなく、
    "_" アンダーバー を入れる。
    または、引数自体を省略する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_snippetAdd( key, sentence, spaceFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

入力補完一覧 のＧｕｉの 簡易入力 のタブにある、
簡易入力と同じものを追加する。

似たようなものに、規定のコマンドの
&snippetAdd がある。

できることは変わらない。

引数は、下記を参考に。

-----------------------------------------------------
引数1

    キーになる文字。
引数2

    展開後の文字。
引数3

    TrueかFalse を指定する。
    展開後にスペースを付け足すかどうか。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_stringReplace( str, searchText, replaceText, allFlag=False )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
文字を置換したもの。または元の文字

-----------------------------------------------------

文字を置換する。
StringReplace, str, str, %searchText% , %replaceText%, All

か
StringReplace, str, str, %searchText% , %replaceText%

を使う。

IfInString で指定の文字があるか確認してから使う。

元の文字列から、置換する文字が見つからなければ、
元の文字列を返す。

引数は、下記を参考に。

-----------------------------------------------------
引数1

    元の文字列。
引数2

    置換する文字。
引数3

    置換後の文字。
引数4

    TrueかFalse を指定する。
    True なら、置換する文字を全て、置換後の文字に変える。
    False なら、置換する文字を一つだけ変える。 一番左側にある文字のみ。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_textExe( command )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

一行テキストと同じ処理を実行する。

引数に処理を指定する。
一行テキストに記入する場合と同じ。

-----------------------------------------------------
引数1

    スクリプトを指定する。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_textExeTextSplit( text1
, text2
, text3
, workFolder
, text5
, text6
, text7
, text8
, dbqFlag=True )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

分割テキストと同じ処理を実行する。

引数に処理を指定。
分割テキストに記入する場合と同じ。

dbqFlag の引数は、
ファイルパスのみなら""をつける のチェックボックスと同じもの。

True なら、チェックをしている時と同じ動作をする。

この関数を使って実行した場合でも、
結果表示は 分割テキスト の 出力先 の方には出力はしない。

引数は下記を参考に。

-----------------------------------------------------
引数1

    規定のコマンド の入力欄と同じ。
引数2

    アイテム名　か　ファイルパス　か　引数１ の入力欄と同じ。
引数3

    アイテムの引数　か　引数２ の入力欄と同じ。
引数4

    作業フォルダ の入力欄と同じ。
引数5

    引数３ の入力欄と同じ。
引数6

    引数４ の入力欄と同じ。
引数7

    引数５ の入力欄と同じ。
引数8

    ＆＆＆　や　＞＞＞　の引数 の入力欄と同じ。
引数9

    TrueかFalse を指定する。
    ファイルパスのみなら""をつける のチェックボックスと同じ。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_textOut( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
# # や % % を展開した文字

-----------------------------------------------------

#[アイテム名]# や %[変数名]% の文字があった場合、
アイテムのリンク先や変数の値に変える。

このサイトでは、この処理をテキストアウトするとか、展開するとか言っている。

明示的に展開したい場合のために用意している。

ない場合は、元の文字列を返す。
[変数名] := "#[アイテム名]# や %[変数名]%"

の様に、変数を代入する処理などで
" " でくくられた文字列は、
# # や % % で囲まれた文字は展開されないので、
その変数の文字を展開したい場合のためにも用意している。

-----------------------------------------------------
引数1

    文字列を指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_tmpOutput( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

一時的な説明表示 に、
引数の文字を出力する。

前にあった文字を消し、上書きで出力する。

-----------------------------------------------------
引数1

    出力する文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_toolTipOutput( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

ツールチップに、引数の文字を出力する。

O_toolTipX
O_toolTipY
の位置に表示され、

O_toolTipSecond
の秒数で閉じる。

-----------------------------------------------------
引数1

    出力する文字。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_toolTipOutputAssign( str, posX, posY, sec=3 )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

ツールチップに、引数の文字を出力する。

表示する位置と秒数を指定する。

O_toolTipX
O_toolTipY
O_toolTipSecond
の設定の影響を受けない。

-----------------------------------------------------
引数1

    出力する文字。
引数2

    横の位置を数字で指定。
    数字が大きいほど右の位置になる。
引数3

    縦の位置を数字で指定。
    数字が大きいほど下の位置になる。
引数4

    表示させる秒数を指定。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_toolTipOutputAssignNumber2( str, posX, posY, sec=3 )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------

ツールチップに、引数の文字を出力する。

2 の番号を使ったツールチップ。

F_toolTipOutputAssign( str, posX, posY, sec ) の関数を使って表示させたツールチップの影響を受けない、
第二のツールチップ。

内部処理的に、閉じるために使用するサブルーチンなどが独立しているため
上の関数で作ったツールチップとの同時使用が可能。

表示する位置と秒数を指定する。

O_toolTipX
O_toolTipY
O_toolTipSecond
の設定の影響を受けない。

-----------------------------------------------------
引数1

    出力する文字。
引数2

    横の位置を数字で指定。
    数字が大きいほど右の位置になる。
引数3

    縦の位置を数字で指定。
    数字が大きいほど下の位置になる。
引数4

    表示させる秒数を指定。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_transformDeref( str )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
変換した文字列。または元の文字列。

-----------------------------------------------------
Transform, [変数名], Deref, %[変数名]%

を実行する。

`r や `n などの文字は CRの改行 や LFの改行 に変換される。

ほぼ全ての ` を用いたエスケープ文字は変換される。

他にも、 %[変数名]% を、変数の値に変える効果も持っている。
諸注意

この関数で、 #[アイテム名]# の文字を展開することはできない。

TRR では、これらの `n などの文字は改行扱いされないため、スクリプトでこれらの文字を使用する場合は、
[変数名] := F_transformDeref( [変数名] )

などを使用していかなければならない。
補足

TRR上のスクリプトでは、
" " で囲んだ場合は、特定のルールで、 `n は改行に変換される。

他にも、特定の規定コマンドのみ `n は改行に変換される。

この事の詳しいルールは別のページで説明する。

細かい説明
文字が" "で囲まれているときのルール

-----------------------------------------------------
引数1

    文字列を指定。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_winActiveAndWait( winTitle="A" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
WinActivate, %winTitle%

と
WinWaitActive, %winTitle%, , 1

をただ実行するだけ。

引数で指定したウインドウタイトルのウインドウをアクティブにするのと、
アクティブになるのを少しだけ待つ。

-----------------------------------------------------
引数1

    ウインドウタイトルを指定する。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
## F_winWaitActive( winTitle="A" )
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

返り値
なし

-----------------------------------------------------
WinWaitActive, %winTitle%, , 1

をただ実行するだけ。

引数で指定したウインドウタイトルのウインドウが
アクティブになるのを少しだけ待つ。

-----------------------------------------------------
引数1

    ウインドウタイトルを指定する。


