

uptype6_argSplitSpaceCommand(command, arg1, arg2, arg3, arg4, arg5, argOther, useControl, useGuiNum){

/*
	実際は arg8 までしか認識しない。半角スペースが９個以上ある場合は認識できない文字列があるということである。
	argOther は 
	argOther := arg6 . " " . arg7 . " " . arg8
	としたものでしかない

	if(command == "newCommand1" ) {
		userMakeFunc1(command, arg1, arg2, arg3, arg4, arg5, argOther, useControl, useGuiNum)
		return True
	} else if(command == "newCommand2" ) {
		userMakeFunc2(command, arg1, arg2, arg3, arg4, arg5, argOther, useControl, useGuiNum)
		return True
	}
*/


	return  False
}

/*
タイプ６
の特徴
==========================================
	引数は、半角スペースで分割されて、それが引数の一つとして扱われる。
	
	設定の「空白のあるファイル名を自動的に調べて対応する」の設定で、
	半角スペースのあるファイルが一つの引数になるか、複数の引数に分かれるかが決まる。
	
	" " で囲むと、それが一つの引数として扱われる。（そのあと、" " は取り除かれる。）

	「""」の文字を入れてたら、「null」という文字に置き換えられる。
	none　の文字を入れてたら、文字がカラの一つの引数として扱われる。（引数を一つ飛ばすときに使える。ただし現時点では必要になるケースはない。）

-----------------------------
	<<< での動作
	読み込む
-----------------------------
	履歴に残すか
	残す
-----------------------------
	&&& での動作
	認識して処理する
-----------------------------
	>>> での動作
	認識して処理する
-----------------------------
	##と%%を展開するかどうか
	する
-----------------------------
	" " があった場合
	" "で囲まれた文字は一つの引数として扱われ、
	そのあと、" "は取り除かれる。
-----------------------------
	分割テキストでの動作
		それぞれの入力欄の文字が１つの引数として扱われる。
		半角スペースを使用しても、意味がない。
		（引数が４つ必要な場合は、４つの入力欄に記入しなければならない。半角スペースでは区切れない。）

		&&& や >>> の認識して実行するが、
		&&& や >>> の引数　の入力欄に入れなければ、認識しない。
-----------------------------
	該当する規定のコマンド
	&relativeAssign
	&fullPathAssign
	&hotkeyOnTextNewFromCommand
	大半の規定のコマンドはこの分類になる
==========================================
*/
